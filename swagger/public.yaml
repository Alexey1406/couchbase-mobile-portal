# this is an example of the Sync Gateway API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: Sync Gateway
  description: Documentation for the Sync Gateway REST API
  version: "1.2.1"
# the domain of the service
host: syncgateway.couchbasemobile.com
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /v1.2.1
produces:
  - application/json
################################################################################
#                                   Parameters                                 #
################################################################################
parameters:
  $ref: ./parameters/index.yaml
################################################################################
#                                   Paths                                      #
################################################################################
paths:
  /:
    get:
      tags:
        - Server
      summary: Server
      description: |
        Returns meta-information about the server.
      responses:
        200:
          description: Meta-information about the server.
          schema:
            type: object
            properties:
              couchdb:
                type: string
                description: Contains the string 'Welcome' (this is required for compatibility with CouchDB)
              vendor/name:
                type: string
                description: The server type ('Couchbase Sync Gateway)
              vendor/version:
                type: string
                description: The server version
              version:
                type: string
                description: Sync Gateway version number
  /{db}:
    parameters:
      - $ref: '#/parameters/db'
    get:
      tags:
        - Database
      summary: Database
      description: |
        This request retrieves information about the database.
      responses:
        200:
          description: Request completed successfully.
          schema:
            type: object
            properties:
              db_name:
                type: string
                description: Name of the database
              db_uuid:
                type: integer
                description: Database identifier
              disk_format_version:
                type: integer
                description: Database schema version
              disk_size:
                type: integer
                description: Total amount of data stored on the disk (in bytes)
              instance_start_time:
                type: string
                description: Date and time the database was opened (in microseconds since 1 January 1970)
              update_seq:
                type: string
                description: Number of updates to the database
        401:
          description: Unauthorized. Login required.
        404:
          description: Not Found. Requested database not found.
    post:
      tags:
        - Database
      summary: Create document
      description: |
        This request creates a new document in the specified database. You can either specify the document ID by including the _id object in the request message body, or let the software generate an ID.
      responses:
        200:
          description: The document was written successfully
          schema:
            $ref: '#/definitions/Success'
  /{db}/{doc}:
    parameters:
      - $ref: '#/parameters/db'
      - $ref: '#/parameters/doc'
    get:
      tags:
        - Document
      parameters:
        - $ref: '#/parameters/attachments'
        - $ref: '#/parameters/atts_since'
        - $ref: '#/parameters/open_revs'
        - $ref: '#/parameters/revs'
      summary: Get document
      description: This request retrieves a document from a database.
      responses:
        200:
          description: The message body contains the following objects in a JSON document.
          schema:
            $ref: '#/definitions/Success'
    put:
      tags:
        - Document
      parameters:
        - $ref: '#/parameters/new_edits'
        - $ref: '#/parameters/rev'
      summary: Create or update document
      description: |
        This request creates a new document or creates a new revision of an existing document. It enables you to specify the identifier for a new document rather than letting the software create an identifier. If you want to create a new document and let the software create an identifier, use the POST /db request.
        If the document specified by doc does not exist, a new document is created and assigned the identifier specified in doc. If the document already exists, the document is updated with the JSON document in the message body and given a new revision.
      responses:
        200:
          description: The response is a JSON document that contains the following objects
          schema:
            $ref: '#/definitions/Success'
    delete:
      tags:
        - Document
      parameters:
        - $ref: '#/parameters/rev'
      summary: Delete document
      description: |
        This request deletes a document from the database. When a document is deleted, the revision number is updated so the database can track the deletion in synchronized copies.
      responses:
        200:
          description: Document successfully removed
          schema:
            $ref: '#/definitions/Success'
  /{db}/_local/{local_doc}:
    parameters:
      - $ref: '#/parameters/db'
      - $ref: '#/parameters/local_doc'
    get:
      tags:
        - Document
      summary: Get local doc
      description: |
        This request retrieves a local document. Local document IDs begin with _local/. Local documents are not replicated or indexed, don't support attachments, and don't save revision histories. In practice they are almost only used by Couchbase Lite's replicator, as a place to store replication checkpoint data.
      responses:
        200:
          description: The message body contains the following objects in a JSON document.
          schema:
            $ref: '#/definitions/Success'
    put:
      tags:
        - Document
      summary: Create or update a local document
      description: |
        This request creates or updates a local document. Local document IDs begin with _local/. Local documents are not replicated or indexed, don't support attachments, and don't save revision histories. In practice they are almost only used by the client's replicator, as a place to store replication checkpoint data.
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Success'
    delete:
      tags:
        - Document
      summary: Delete a local document
      description: |
        This request deletes a local document. Local document IDs begin with _local/. Local documents are not replicated or indexed, don't support attachments, and don't save revision histories. In practice they are almost only used by Couchbase Lite's replicator, as a place to store replication checkpoint data.
      parameters:
        - $ref: '#/parameters/rev'
      responses:
        200:
          description: Document successfully removed
          schema:
            $ref: '#/definitions/Success'
  /{db}/{doc}/{attachment}:
    parameters:
      - $ref: '#/parameters/db'
      - $ref: '#/parameters/doc'
      - $ref: '#/parameters/attachment'
    get:
      tags:
        - Attachment
      summary: Get attachment
      description: |
        This request retrieves a file attachment associated with the document. The raw data of the associated attachment is returned (just as if you were accessing a static file). The Content-Type response header is the same content type set when the document attachment was added to the database.
      parameters:
        - $ref: '#/parameters/rev'
      responses:
        200:
          description: The message body contains the attachment, in the format specified in the Content-Type header.
        304:
          description: Not Modified, the attachment wasn't modified if ETag equals the If-None-Match header
        404:
          description: Not Found, the specified database, document or attachment was not found.
    put:
      tags:
        - Attachment
      summary: Add or update document
      description: |
        This request adds or updates the supplied request content as an attachment to the specified document. The attachment name must be a URL-encoded string (the file name). You must also supply either the rev query parameter or the If-Match HTTP header for validation, and the Content-Type headers (to set the attachment content type).

          When uploading an attachment using an existing attachment name, the corresponding stored content of the database will be updated. Because you must supply the revision information to add an attachment to the document, this serves as validation to update the existing attachment.

          Uploading an attachment updates the corresponding document revision. Revisions are tracked for the parent document, not individual attachments.
      responses:
        200:
          description: Operation completed successfully
          schema:
            $ref: '#/definitions/Success'
        409:
          description: Conflict, the document revision wasn't specified or it's not the latest.
  /{db}/_all_docs:
    parameters:
      - $ref: '#/parameters/db'
    get:
      tags:
       - Database
      summary: All docs
      description: |
        This request returns a built-in view of all the documents in the database.
      parameters:
        - $ref: '#/parameters/access'
        - $ref: '#/parameters/channels'
        - $ref: '#/parameters/include_docs'
        - $ref: '#/parameters/revs'
        - $ref: '#/parameters/update_seq'
      responses:
        200:
          description: Request completed successfully
          schema:
            type: object
            properties:
              offset:
                type: string
                description: Starting index of the returned rows.
              rows:
                type: array
                description: Array of row objects.
                items:
                  $ref: '#/definitions/QueryRow'
              total_rows:
                type: integer
                description: Number of documents in the database. This number is not the number of rows returned.
              update_seq:
                type: integer
                description: Sequence identifier of the underlying database that the view reflects.
    post:
      tags:
        - Database
      summary: All docs
      description: |
        This request retrieves specified documents from the database.
      parameters:
        - $ref: '#/parameters/db'
        - $ref: '#/parameters/access'
        - $ref: '#/parameters/channels'
        - $ref: '#/parameters/include_docs'
        - $ref: '#/parameters/revs'
      responses:
        200:
          description: Request completed successfully
          schema:
            type: object
            properties:
              offset:
                type: string
                description: Starting index of the returned rows.
              rows:
                type: array
                description: Array of row objects.
                items:
                  $ref: '#/definitions/QueryRow'
              total_rows:
                type: integer
                description: Number of documents in the database. This number is not the number of rows returned.
              update_seq:
                type: integer
                description: Sequence identifier of the underlying database that the view reflects.
  /{db}/_bulk_docs:
    parameters:
      - $ref: '#/parameters/db'
    post:
      tags:
        - Database
      summary: Bulk docs
      description: |
        This request enables you to add, update, or delete multiple documents to a database in a single request. To add new documents, you can either specify the ID (_id) or let the software create an ID. To update existing documents, you must provide the document ID, revision identifier (_rev), and new document values. To delete existing documents you must provide the document ID, revision identifier, and the deletion flag (_deleted).
      parameters:
        - in: query
          name: all_or_nothing
          description: Indicates whether to use all-or-nothing semantics for the database commit mode
          required: false
          type: boolean
        - in: query
          name: docs
          description: List containing new or updated documents. Each object in the array can contain the following properties _id, _rev, _deleted, and values for new and updated documents.
          required: true
          type: array
          items:
            type: string
        - in: query
          name: new_edits
          description: Indicates whether to assign new revision identifiers to new edits.
          required: true
          type: boolean
      responses:
        201:
          description: Documents have been created or updated
          schema:
            type: array
            items:
              $ref: '#/definitions/Success'
  /{db}/_bulk_get:
    parameters:
      - $ref: '#/parameters/db'
    post:
      tags:
        - Database
      summary: Bulk get
      description: |
        This request returns any number of documents, as individual bodies in a MIME multipart response. (Perhaps confusingly, it uses the POST method, not GET, so that the list of document IDs can be sent in the body instead of as URL parameters.)
        The response body is in MIME multipart format. Each enclosed body contains one requested document. The bodies appear in the same order as in the request, but can also be identified by their X-Doc-ID and X-Rev-ID headers.
        A body for a document with no attachments will have content type application/json and contain the document itself.
        A body for a document that has attachments will be written as a nested multipart/related body. Its first part will be the document's JSON, and the subsequent parts will be the attachments (each identified by a Content-Disposition header giving its attachment name.)
      parameters:
        - $ref: '#/parameters/revs'
        - $ref: '#/parameters/attachments'
        - $ref: '#/parameters/docs'
      responses:
        200:
          description: Request completed successfully
          schema:
            type: object
            properties:
              docs:
                type: array
                items:
                  - $ref: '#/definitions/Success'
  /{db}/_changes:
    parameters:
      - $ref: '#/parameters/db'
    get:
      tags:
        - Database
      parameters:
        - $ref: '#/parameters/channels_list'
        - $ref: '#/parameters/doc_ids'
        - $ref: '#/parameters/feed'
        - $ref: '#/parameters/filter'
        - $ref: '#/parameters/heartbeat'
        - $ref: '#/parameters/include_docs'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/since'
        - $ref: '#/parameters/style'
        - $ref: '#/parameters/timeout'
      summary: Changes
      description: |
        This request retrieves a sorted list of changes made to documents in the database, in time order of application. Each document appears at most once, ordered by its most recent change, regardless of how many times it's been changed.
        This request can be used to listen for update and modifications to the database for post processing or synchronization. A continuously connected changes feed is a reasonable approach for generating a real-time log for most applications.
      responses:
        200:
          description: Request completed successfully
          schema:
            type: object
            properties:
              last_seq:
                type: integer
                description: Last change sequence number
              results:
                type: array
                description: List of changes to the database. See the following table for a list of fields in this object.
                items:
                  - $ref: '#/definitions/ChangesFeedRow'
  /{db}/_design/{ddoc}:
    $ref: ./paths/db/_design/ddoc/ddoc.yaml
  /{db}/_design/{ddoc}/_view/{view}:
    $ref: ./paths/db/_design/ddoc/_view/view.yaml
################################################################################
#                                 Definitions                                  #
################################################################################
definitions:
  $ref: ./definitions/index.yaml