<?xml version="1.0" encoding="UTF-8" ?>
<guide
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../docs.xsd"
        id="ttl">
  <title>Document expiration (TTL)</title>
  <description></description>
  <introduction>
    <topic>
      <body>
        <section>
          <title>Document expiration (TTL)</title>
          <body>
            <paragraph>Documents in a local database can have an expiration time. After that time, they are
              automatically purged from the database - this completely removes them, freeing the space they occupied.
            </paragraph>
            <paragraph>The following example sets the TTL for a document to 5 seconds from the current time.</paragraph>
            <code-set>
              <code-block language="objective-c"><![CDATA[
              NSDate* ttl = [NSDate dateWithTimeIntervalSinceNow: 5];
              NSDictionary* properties = @{@"foo": @"bar"};
              CBLDocument* doc = [db createDocument];
              [doc putProperties:properties error:nil];
              doc.expirationDate = ttl;
              ]]></code-block>
              <code-block language="swift"><![CDATA[
              var ttl = NSDate(timeIntervalSinceNow: 5)
              var properties = ["foo": "bar"]
              var doc = db.createDocument()
              doc.putProperties(properties, error: nil)
              doc.expirationDate = ttl
              ]]></code-block>
              <code-block language="android"><![CDATA[
              Date tll = new Date(System.currentTimeMillis() + 5000);
              Document doc = database.createDocument();
              Map<String, Object> properties = new HashMap<String, Object>();
              properties.put("foo", "bar");
              doc.putProperties(properties);
              doc.setExpirationDate(ttl);
              ]]></code-block>
              <code-block language="java"><![CDATA[
              Date tll = new Date(System.currentTimeMillis() + 5000);
              Document doc = database.createDocument();
              Map<String, Object> properties = new HashMap<String, Object>();
              properties.put("foo", "bar");
              doc.putProperties(properties);
              doc.setExpirationDate(ttl);
              ]]></code-block>
              <code-block language="c#"><![CDATA[
              var doc = db.CreateDocument();
              doc.PutProperties(new Dictionary<string, object> { { "foo", "bar" } });
              doc.ExpireAfter(TimeSpan.FromSeconds(5));
              ]]></code-block>
            </code-set>
            <paragraph>Expiration timing is not highly precise. The times are stored with one-second granularity, and
              the timer that triggers expiration may be delayed slightly by the operating system or by other activity on
              the database thread. Expiration won't happen while the app is not running; this means it may be triggered
              soon after the app is activated or launched, to catch up with expiration times that have already passed.
            </paragraph>
            <note> As with the existing explicit
              <strong>purge</strong>
              mechanism, this applies only to the local database; it has nothing to do with replication. This expiration
              time is not propagated when the document is replicated. The purge of the document does not cause it to be
              deleted on any other database. If the document is later updated on a remote database that the local
              database pulls from, the new revision will be pulled and the document will reappear.
            </note>
          </body>
        </section>
      </body>
    </topic>
  </introduction>
</guide>
