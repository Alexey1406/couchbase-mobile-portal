<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../../docs.xsd"
         id="manager">
   <title>Manager</title>
   <description>This guide shows you how to use a Manager. A Manager is a top-level object that manages a collection of Database instances. You need to create a Manager instance before you can work with Couchbase Lite in your Application.</description>
   <introduction>
       <paragraph>A <code>Manager</code> is the top-level object that manages a collection of Couchbase Lite <code>Database</code> instances. 
           You need to create a <code>Manager</code> instance before you can work with Couchbase Lite objects in your Application.
      </paragraph>
   </introduction>
   <topics>
      <topic id="creating-a-manager">
         <title>Creating a manager</title>
         <body>
            <paragraph>
                You create a <code>Manager</code> object by calling a constructor or initializer on the Manager class.
            </paragraph>
            <code-set>
                <code-block language="objective-c"><![CDATA[
                  - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
                  {
                      /*
                       * In Objective-C the <code>Manager</code> shared instance and all the objects descending
                       * from it may only be used on the main thread.
                       */                      
                      CBLManager *manager = [CBLManager sharedInstance];
                      if (!manager) {
                          NSLog(@"Cannot create Manager instance");
                          exit(-1);
                      }
                      return YES;
                  }]]>
               </code-block>
                  <code-block language="java"><![CDATA[
                  public class Application extends android.app.Application {
                      private Manager manager;
                      private static Context mContext;
                      
                      ...
                      
                      @Override
                      public void onCreate() {
                          super.onCreate();
                          mContext = getApplicationContext();
                          try {
                              /*
                               * In Java the Manager instance and all the objects descending
                               * from it may be used on any thread.
                               */
                              manager = new Manager(new AndroidContext(mContext), Manager.DEFAULT_OPTIONS);
                          } catch (IOException e) {
                              Log.e(TAG, "Cannot create Manager instance", e);
                              return;
                          }
                      }
                  }
                  ]]></code-block>
            </code-set>
         </body>
      </topic>
      <topic id="manager-options">
         <title>Manager options</title>
         <body>
             <paragraph>By default a <code>Manager</code> will open a <code>Database</code> with read/write access. 
                 If you want to ensure that data can not be modified you can restrict <code>Database</code> access to read only by passing a <code>ManagerOptions</code> object to the <code>Manager</code> constructor or initilaizer.
            </paragraph>
            <code-set>
               <code-block language="objective-c"><![CDATA[
                  - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
                  {
                      NSError* error;
                      CBLManagerOptions options;
                      options.readOnly = YES;
                      CBLManager *manager = [[CBLManager alloc] initWithDirectory: CBLManager.defaultDirectory options: &options error: &error ];
                      if (error) {
                          NSLog(@"Cannot create Manager instance with custom options");
                          exit(-1);
                      }
                      return YES;
                  }
                  ]]></code-block>
               <code-block language="java"><![CDATA[
                  public class Application extends android.app.Application {
                      private Manager manager;
                      private static Context mContext;
                      
                      ...
                      
                      @Override
                      public void onCreate() {
                          super.onCreate();
                          mContext = getApplicationContext();
                          try {
                              ManagerOptions customOptions = new ManagerOptions();
                              customOptions.setReadOnly(true);
                              manager = new Manager(new AndroidContext(mContext), customOptions);
                          } catch (IOException e) {
                              Log.e(TAG, "Cannot create Manager instance with custom options", e);
                              return;
                          }
                      }
                  }
                  ]]></code-block>
            </code-set>
         </body>
      </topic>
       <topic id="Global logging settings">
           <title>Global logging settings</title>
           <body>
               <paragraph>
                   You can customize the global logging settings for Couchbase Lite via the <code>Mananger</code> class.
               </paragraph>
               <paragraph>
                   Log messages are tagged, allowing them to be logically grouped by activity. 
                   You can control whether individual tag groups are logged, 
                   in Java it is also possible to set log levels for each tag group.
               </paragraph>
               <paragraph>
                   In Objective-C tag groups is disabled by default, in Java tag groups are enabled at level WARN by default.
                   
                   The available tags are:
               </paragraph>
               <code-set>
                   <code-block language="objective-c"><![CDATA[
                       BLIP
                       BLIPVerbose
                       CBLDatabase
                       CBLJSONMatcher
                       CBLListener
                       CBLListenerVerbose
                       CBLModel
                       CBL_Server
                       CBL_URLProtocol
                       CBLValidation
                       CBLRemoteRequest
                       CBLMultiStreamWriter
                       ChangeTracker
                       ChangeTrackerVerbose
                       JSONSchema
                       MYDynamicObject
                       Query
                       RemoteRequest
                       Sync
                       SyncVerbose
                       View
                       ViewVerbose
                       WS
                       ]]>
                   </code-block>
                   <code-block language="java"><![CDATA[
                    BlobStore
                    CBLite // default "catch-all" tag
                    ChangeTracker
                    Database
                    Listener
                    MultistreamWriter
                    Query
                    RemoteRequest
                    Router
                    Sync
                    View
                       ]]>
                   </code-block>
               </code-set>
               <paragraph>
                   You would enable the "Sync" tag group by calling the <code>enableLogging</code> method on the <code>Manager</code>class. 
                   In Java you may also set the logging level.
               </paragraph>
               <code-set>
                   <code-block language="objective-c"><![CDATA[
                       - (BOOL)application: (UIApplication *)application didFinishLaunchingWithOptions: (NSDictionary *)launchOptions {
                      [CBLManager enableLogging: @"Sync"];
                      return YES;
                  }]]>
                   </code-block>
                   <code-block language="java"><![CDATA[
                  public class Application extends android.app.Application {
                      ...
                      @Override
                      public void onCreate() {
                          super.onCreate();
                          ...
                          Manager.enableLogging("Sync", Log.VERBOSE);
                          ...
                      }
                  }
                  ]]>
                   </code-block>
               </code-set>
               <paragraph>In Java the <code>Log</code> class provides static constants for the default tag groups:</paragraph>
               <unordered-list>
                   <list-item>Log.TAG_BLOB_STORE //BlobStore</list-item>
                   <list-item>Log.TAG //CBLite</list-item>
                   <list-item>Log.TAG_CHANGE_TRACKER //ChangeTracker</list-item>
                   <list-item>Log.TAG_DATABASE //Database</list-item>
                   <list-item>Log.TAG_LISTENER //Listener</list-item>
                   <list-item>Log.TAG_MULTI_STREAM_WRITER //MultistreamWriter</list-item>
                   <list-item>Log.TAG_QUERY //Query</list-item>
                   <list-item>Log.TAG_REMOTE_REQUEST //RemoteRequest</list-item>
                   <list-item>Log.TAG_ROUTER //Router</list-item>
                   <list-item>Log.TAG_SYNC //Sync</list-item>
                   <list-item>Log.TAG_VIEW //View</list-item>
               </unordered-list>
               <paragraph>and static constants for the supported logging levels:</paragraph>
               <unordered-list>
                   <list-item>Log.VERBOSE</list-item>
                   <list-item>Log.DEBUG</list-item>
                   <list-item>Log.INFO</list-item>
                   <list-item>Log.WARN</list-item>
                   <list-item>Log.ERROR</list-item>
               </unordered-list>
            </body>
       </topic>
       <topic id="manager-concurrency-support">
           <title>Concurrency Support</title>
           <body>
               <paragraph>In Java all Couchbase Lite objects may be shared freely
                   between threads. In Objective-C <code>Manager</code> instances and the object graph associated with them,
                   may only be accessed from the thread that created the <code>Manager</code> instance.  In Objective-c 
                   concurrency is supported through explicit method calls. 
               </paragraph>
               <paragraph>
                   You can use a <code>Manager</code> instance to perform any operation in the background. 
                   Be careful with this, though! CBL objects are per-thread, and your block runs on a background thread, so:
               </paragraph>
               <unordered-list>
                   <list-item><paragraph>
                       You can’t use any of the CBL objects (databases, documents, models…) you were 
                       using on the main thread. Instead, you have to use the CBLDatabase object 
                       passed to the block, and the other objects reachable from it.
                   </paragraph></list-item>
                   <list-item><paragraph>
                       You can’t save any of the CBL objects in the block and then call them on the 
                       main thread. (For example, if in the block you allocated some CBLModels and 
                       assigned them to properties of application objects, bad stuff would happen 
                       if they got called later on by application code.)
                   </paragraph></list-item>
                   <list-item><paragraph>
                       And of course, since the block is called on a background thread, any application 
                       or system APIs you call from it need to be thread-safe.
                   </paragraph></list-item>
               </unordered-list>
               <paragraph>
                   In general, it’s best to do only very limited things using this API, otherwise 
                   it becomes too easy to accidentally use main-thread CBL objects in the block, or 
                   store background-thread CBL objects in places where they’ll be called on the main thread.
               </paragraph>
               <paragraph>
                   Here’s an example that deletes a number of documents given an array of IDs:
               </paragraph>
               <code-set>
                   <code-block language="objective-c"><![CDATA[
                  - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
                  {
                      CBLManager* mgr = [CBLManager sharedInstance];

                      if (!mgr) {
                          NSLog(@"Cannot get Manager shared instance");
                          exit(-1);
                      }
                      [mgr asyncTellDatabaseNamed: @"mydb" to: ^(CBLDatabase *bgdb) {
                          for (NSString* docID in docIDs) {
                              [[bgdb documentWithID: docID] deleteDocument: nil];
                      }];
                      return YES;
                  }
                  ]]></code-block>
               <code-block language="java"><![CDATA[
                  public class Application extends android.app.Application {
                      private Manager manager;
                      private static Context mContext;
                      
                      ...
                      
                      @Override
                      public void onCreate() {
                          super.onCreate();
              
                          try {
                              final String[] docIds = new String[] { "doc1", "doc2", "doc3" };
                              Database myDb = manager.getDatabase("mydb");
                              myDb.runAsync(new AsyncTask() {
                                 @Override
                                  public void run(Database database) {
                                      try {
                                          for (String docId : docIds) {
                                              database.getDocument(docId).delete();
                                          }
                                      } catch (CouchbaseLiteException e) {
                                         e.printStackTrace();
                                      }
                                  }
                              });
                          } catch (CouchbaseLiteException e) {
                              e.printStackTrace();
                          }
                      }
                  }
                  ]]></code-block>

               </code-set>
               <paragraph>
                   If you want to do lots of Couchbase Lite processing in the background in Objective-C,
                   the best way to do it is to start your own background thread and use a new <code>Manager</code> instance on it.
               </paragraph>
               <code-set>
                   <code-block language="objective-c"><![CDATA[
                  - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
                  {
                      NSError* error;
                      /*
                       * Don’t call [CBLManager sharedInstance] on a background thread. That instance is for the main 
                       * thread. Instead, call -copy on your main manager on the main thread, and then use that 
                       * instance on the background thread.
                       */
                      CBLManager* bgMgr = [[CBLManager sharedInstance] copy];
                      if (!bgMgr) {
                          NSLog(@"Cannot create Manager instance");
                          exit(-1);
                      }
                      [NSThread detachNewThreadSelector: @selector(runBackground:) toTarget: self withObject: bgMgr];
                      return YES;
                  }
                  ]]></code-block>
               <code-block language="java"><![CDATA[
              // There is no Java equivalent of this code snippet, since 
              // Couchbase Lite objects (including Manager instances)
              // may be shared freely among threads.
                  ]]></code-block>
               </code-set>
           </body>
       </topic>
       <topic id="releasing-resources">
           <title>Releasing resources</title>
           <body>
               <paragraph>
                   If your app is moving to a background state or receives a request to release memory, 
                   you can release the resources used and close all databases managed by 
                   a <code>Manager</code> instance .
               </paragraph>
               <code-set>
                   <code-block language="objective-c"><![CDATA[
                  - (void)applicationDidEnterBackground:(UIApplication *)application {
                      // Use this method to release shared resources, save user data, invalidate timers, and store 
                      // enough application state information to restore your application to its current state 
                      // in case it is terminated later. 
                      // If your application supports background execution, this method is called 
                      //instead of applicationWillTerminate: when the user quits.
                      [self.mananger close];
                  }
                  ]]></code-block>
                   <code-block language="java"><![CDATA[
                  public class Application extends android.app.Application {
                      private Manager manager;
                      
                      ...
                      
                      @Override
                      public void onTrimMemory (int level) {
                          manager.close();
                      }
                  }
                  ]]></code-block>
               </code-set>
           </body>
       </topic>
   </topics>
</article>
