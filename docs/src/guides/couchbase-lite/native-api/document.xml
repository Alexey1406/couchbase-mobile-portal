<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../../../docs.xsd"
    id="document">
    <title>Document</title>
    <description>Guide to using Documents.</description>
    <introduction>
        <paragraph>
            A document is a JSON object, similar to a dictionary data structure, that consists of arbitrary key-value pairs. There’s no schema—every document can have its own individual set of keys, although almost all databases adopt one or more informal schemas.
        </paragraph>
        <paragraph>
            Documents can be used to represent any entity in the system.  You can think of a Document as serving a similar purpose to a SQL database row.  However, a document has a much more flexible data format than a SQL database row, generally contains all the information about a data entity (including compound data) rather than being normalized across tables, and can have arbitrary-sized binary attachments.
        </paragraph>
        <paragraph>
            Documents are the primary interface to store and retrieve information from the database, both from doing CRUD operations and from a querying point of view.
        </paragraph>
    </introduction>
    <topics>
        <topic id="crud">
            <title>CRUD</title>
            <body>
                <section id="creating">
                    <title>Creating</title>
                    <body>
                        <code-set>
                            <code-block language="java">
                                Map&lt;String, Object> properties = new HashMap&lt;String, Object>();
                                properties.put("type", "list");
                                properties.put("title", title);
                                properties.put("created_at", currentTimeString);
                                properties.put("owner", "profile:" + userId);
                                properties.put("members", new ArrayList&lt;String>());
                                
                                Document document = database.createDocument();
                                document.putProperties(properties);
                            </code-block>
                        </code-set>
                    </body>
                </section>
                <section id="updating">
                    <title>Updating</title>
                    <body>
                        <code-set>
                           <code-block language="java">
                               Document task = (Document) database.getDocument("task1");
                               Map&lt;String, Object> properties = new HashMap&lt;String, Object>(task.getProperties());
                               properties.put("checked", true);
                               task.putProperties(properties);
                           </code-block>
                        </code-set>
                    </body>
                </section>
                <section id="deleting">
                    <title>Deleting</title>
                    <body>
                        <paragraph>
                            Under the hood, deleting a document actually creates a new revision with the <code>_deleted</code> field set to true.  This is largely transparent to the developer.  The typical way to delete a document is to use the `delete()` API call.
                        </paragraph>
                        <code-set>
                            <code-block language="java">
                                Document task = (Document) database.getDocument("task1");
                                task.delete();
                            </code-block>
                        </code-set>
                        <paragraph>
                            If you need to preserve certain fields in deleted documents, you can do so by deleting the document by adding a tombstone revision.  You can retain all of the fields, as in the example below, or you could remove the other fields so that it only contains the fields that you need.
                        </paragraph>
                        <code-set>    
                          <code-block language="java">
                              Map&lt;String, Object> props = new HashMap&lt;String, Object>(doc.getProperties());
                              props.put("_deleted", true);
                              doc.putProperties(props);
                          </code-block> 
                        </code-set>
                    </body>
                </section>
            </body>
        </topic>
        <topic id="relationship-to-attachments">
            <title>Relationship to Attachments</title>
            <body>
                <paragraph>
                    The reason Attachments exist is because of the following problem.  Suppose that you had a document for each User in your system, and you decided to put the user's image as inline base64 directly in the JSON for your document.  This will work, but it will be very inefficient, because each time you modify the User document, Couchbase Lite will need to work with bloated JSON data.  This will slow down JSON parsing as well as increase the bandwidth when syncing this document to a Sync Gateway instance.  
                </paragraph>                
                <paragraph>
                    Attachments were created to solve this problem.  They live outside of the document JSON, yet are strongly associated with the Document.  Since they live outside of the document JSON, attachemnts do not slow down JSON parsing.  Additionally, when it comes time to sync this document with the Sync Gateway, Couchbase Lite will minimize the number of times that attachment data is sent.  It only needs to send the attachment data if this attachment was newly added and it has not already sync'd it.  Changes to document JSON values will <strong>not</strong> cause Couchbase Lite to re-send attachment data when the attachment for that document has not changed.
                </paragraph>
            </body>
        </topic>
        <topic id="revisions">
            <title>Document Revisions</title>
            <body>
                <paragraph>
                    A Revision represents a particular state of a document.  The <strong>current state</strong> of the document is represented by the <strong>latest revision</strong> of that document.  Anytime a document is changed (including deletions), a new revision is created and associated with the Document.
                </paragraph>
            </body>
        </topic>
        <topic id="Resolving Conflicts">
            <title>Resolving Conflicts</title>
            <body></body>
        </topic>
        <topic id="purging-a-document">
            <title>Purging a Document</title>
            <body></body>
        </topic>
        <topic id="change-events">
            <title>Handling Change Events</title>
            <body>
                <section id="how-to-monitor-change-events">
                    <title>How to Monitor Change Events</title>
                    <body></body>
                </section>
                <section id="when-to-use-change-events">
                    <title>When to Use Change Events</title>
                    <body></body>
                </section>
            </body>
        </topic>
        <topic id="special-properies">
            <title>Special Properties</title>
            <body>
                <paragraph>
                    Whatever its contents, though, every document has a special property called <code>_id</code>. This property is the <strong>document ID</strong>, which is the document’s unique identifier in its database. A document ID is similar to a SQL primary key, except that primary keys are usually integers while document IDs are strings. When you create a document, you can either provide your own ID or let Couchbase Lite assign one. If you provide your own document IDs, you can use any string you want, such as a <external-ref href="http://en.wikipedia.org/wiki/Uuid">universally unique identifier (UUID)</external-ref> or a string that is meaningful to your application.
                </paragraph>
                <note type="note">
                    Documents have some other special properties, and their names always start with an underscore. The leading underscore denotes a reserved property—don’t use an underscore prefix for any of your own properties.
                </note>
            </body>
        </topic>
    </topics>
</article>
