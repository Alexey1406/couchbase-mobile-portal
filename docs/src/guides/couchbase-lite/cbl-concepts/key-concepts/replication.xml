<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../../../docs.xsd"
         id="replication">
   <title>Replication</title>
   <description>TODO: Add description.</description>
   <introduction>
      <paragraph>Replication is the key feature of Couchbase Lite that enables document syncing. Replication is conceptually simple—take everything that's changed in database A and copy it over to database B. </paragraph>
      <paragraph>Replication is basically unidirectional. A replication from a remote to a local database is called a <emphasis>pull</emphasis>, and a replication from a local to a remote database is called a <emphasis>push</emphasis>. Bidirectional replication, or <emphasis>sync</emphasis>, is done by configuring both a pull and a push between the same two databases.</paragraph>
      <paragraph>Although any one replication involves only two databases, it's possible to set up chains of replications between any number of databases. This creates a directed graph, with databases as nodes and replications as arcs. Many topologies are possible, from a star with one master database and a number of replicas, to a mesh network where changes made at any node eventually propagate to all the others.</paragraph>
      <paragraph>When working with replication, you need to consider several factors: </paragraph>
      <unordered-list>
         <list-item>
            <paragraph>
               <strong>Push versus pull.</strong> This is really just a matter of whether A or B is the remote database.</paragraph>
         </list-item>
         <list-item>
            <paragraph>
               <strong>Continuous versus one-shot.</strong> A one-shot replication proceeds until all the current changes have been copied, then finishes. A continuous replication keeps the connection open, idling in the background and watching for more changes. As soon as the continuous replication detects any changes, it copies them. Couchbase Lite's replicator is aware of connectivity changes. If the device goes offline, the replicator watches for the server to become reachable again and then reconnects.</paragraph>
         </list-item>
         <list-item>
            <paragraph>
               <strong>Persistent versus non-persistent.</strong> Non-persistent replications, even continuous ones, are forgotten after the app quits. Persistent replications are remembered in a special <code>_replicator</code> database. This is most useful for continuous replications: by making them persistent, you ensure they are always ready and watching for changes every time your app launches.</paragraph>
         </list-item>
         <list-item>
            <paragraph>
               <strong>Filters.</strong> Sometimes you want only particular documents to be replicated, or you want particular documents to be ignored. To do this, you can define a filter function. The function  takes a document's contents and returns <code>true</code> if it should be replicated.</paragraph>
         </list-item>
      </unordered-list>
   </introduction>
   <topics>
      <topic id="replication-workflow">
         <title>Replication Workflow</title>
         <body>
            <paragraph>At a high level, replication is simply a matter of finding all the changes that have been made to the source database since the last replication, fetching them, and applying them to the target database. The first step uses the source's changes feed, passing in a sequence number saved during the previous replication. After all the updates are applied, the checkpoint is updated to the latest sequence number from the source.</paragraph>
            <paragraph>Because replication uses document IDs to identify matching documents, it implicitly assumes that both databases share the same document-ID namespace. (And if they didn't for some reason, they will afterwards, whether or not that was intended!) This is why UUIDs are so popular as document IDs—they pretty much guarantee that new documents created on different servers are distinct. Other naming schemes such as serial numbers or time stamps might cause unintentional ID collisions.</paragraph>
         </body>
      </topic>
      <topic id="conflict-resolution">
         <title>Conflict Resolution</title>
         <body>
            <paragraph>One important aspect of replication is the way it deals with conflicts. A database prevents local conflicts in a document by using MVCC—an attempt to add a conflicting change to a document is rejected. However, there's no way to enforce this across multiple independent databases on different servers and devices. (Well, there are ways, but they involve distributed locking, which scales very poorly and doesn't support offline clients at all.) The result is that the same document (as identified by its ID) can be updated with different data on different instances of Couchbase Lite. The conflict probably won't be detected until one database replicates to the other. What happens then? It's too late to prevent the conflict.  Couchbase Lite itself doesn't know how to reconcile it by merging the two documents together because that requires knowledge of the application schema. What it does instead is simply keep both revisions, and leave it up to the application to review them and merge them together later.</paragraph>
            <paragraph>It's actually not obvious that both revisions are present. When the app retrieves a document by its ID, it would be confusing if it got two copies. Instead, Couchbase Lite somewhat arbitrarily chooses one revision as the "winner" (it's the one whose revision ID is lexicographically higher) and treats that one as the document's default value. Couchbase Lite has API calls to detect the conflict state and to fetch the document's revision tree, which really is a tree now that it's branched. The application can then fetch the "losing" revision by its revision ID, compare the two, and then update the document with the appropriate merged contents, thereby resolving the conflict.</paragraph>
         </body>
      </topic>
   </topics>
</article>
