<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../../../docs.xsd"
         id="revisions">
   <title>Revisions</title>
   <description>TODO: Add description.</description>
   <introduction>
      <paragraph>Couchbase Lite uses revisions to resolve conflicts detected during replication. One significant difference from other databases is document <strong>versioning</strong>. Couchbase Lite uses a technique called <external-ref href="http://en.wikipedia.org/wiki/Multiversion_concurrency_control">Multiversion Concurrency Control</external-ref> (MVCC) to manage conflicts between multiple writers. This is the same technique used by version-control systems like Git or Subversion, and by <external-ref href="http://en.wikipedia.org/wiki/Webdav">WebDAV</external-ref>. Document versioning is similar to the check-and-set mechanism (CAS) of Couchbase Server, except that in Couchbase Lite versioning is required rather than optional and the token is a UUID rather than an integer.</paragraph>
      <paragraph>Every document has a special field called <code>_rev</code> that contains the revision ID. The revision ID is assigned automatically each time the document is saved. Every time a document is updated, it gets a different and unique revision ID.</paragraph>
      <paragraph>When you save an update to an existing document, <emphasis>you must include its current revision ID</emphasis>. If the revision ID you provide isn't the current one, the update is rejected. When this happens, it means some other client snuck in and updated the document before you. You need to fetch the new version, reconcile any changes, incorporate the newer revision ID, and try again.</paragraph>
      <paragraph>Keep in mind that Couchbase Lite is <emphasis>not</emphasis> a version control system and you <emphasis>must not</emphasis> use the versioning feature in your application (for example, you can't use it to store the revision history of pages in a wiki). The old revisions are just <emphasis>cached</emphasis>â€”they are periodically thrown away when the database is compacted, and they're never replicated. They're not there to use in your data model, they're there only to help with concurrency and resolving conflicts during replication.</paragraph>
   </introduction>
</article>
