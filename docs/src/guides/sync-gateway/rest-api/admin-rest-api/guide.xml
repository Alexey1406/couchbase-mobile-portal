<?xml version="1.0" encoding="UTF-8"?>
<guide xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="../../../../docs.xsd"
       id="sync-gateway-admin-apis">
   <title>Admin REST API</title>
   <description>REST calls made specifically for administrative purposes.</description>
  <introduction>
      <paragraph>There are two sets of REST APIs available for the Sync Gateway. The former we address in the 
      reference guide "REST API". To interact and manage the Couchbase Server Sync Gateway, you can use the Admin APIs that are illustrated in
      this reference article.</paragraph>
   </introduction>
   <articles>
      <article id="admin-api-introduction">
         <title>Introduction</title>
		   <description>A first look at the Admin REST API.</description>
		   <introduction>
			  <paragraph>The Admin REST API is a superset of the Sync REST API with the following major extensions:</paragraph>
			  <unordered-list>
				 <list-item>The capability to view, create, and modify users and roles.</list-item>
				 <list-item>The capability to perform management tasks such as creating and deleting databases.</list-item>
				 <list-item>The capability to perform administrative tasks without authentication.  The Admin REST API operates in superuser mode—you can view and modify anything without needing a password or session cookie.</list-item>
			  </unordered-list>
			  <paragraph>By default, the Admin REST API runs on port 4985 (unless you change the <code>adminInterface</code> configuration parameter). <strong>Do not expose this port</strong>—It belongs behind your firewall. Anyone who can reach this port has free access to and control over your databases and user accounts.</paragraph>
		   </introduction>
		   
			<topics>
			  <topic id="admin-rest-api-endpoints">
				 <title>Admin REST API Endpoints</title>
				 <body>
                     <note>In the URL paths shown below, any path component prefixed with a <code>$</code> is a placeholder for a name that can vary; for example, <code>$DB</code> refers to the name of the database.</note>
   					<paragraph>
   					   <code>GET /</code> - Returns a JSON object containing information about the server.</paragraph>
  					<paragraph>
  					   <code>GET /_all_dbs</code> - Returns a list of the names of all databases.</paragraph>
 					<paragraph>
 					   <code>/_profile</code> - POST to this endpoint to enable Go CPU profiling, which can be useful for diagnosing performance problems. To start profiling, send a JSON body with a <code>file</code> property whose value is a path to write the profile to. To stop profiling, send a request without a <code>file</code> property.</paragraph>
					<paragraph>
					   <code>PUT /$DB/</code> - Configures a new database. The body of the request contains the database configuration as a JSON object ()the same as an entry in the <code>databases</code> property of a configuration file. Note that this doesn't create a Couchbase Server bucket—you need to do that before configuring the database.</paragraph>
					<paragraph>
					   <code>DELETE /$DB/</code> - Removes (forgets) a database. It doesn't delete the Couchbase Server bucket or any of its data, though, so you could bring the database back later with a PUT.</paragraph>
   					<paragraph>
   					   <code>POST /$DB/_compact</code> - Compacts a database by removing obsolete document bodies. Needs to be run occasionally.</paragraph>
   					<paragraph>
   					   <code>POST /$DB/_resync</code> - Runs every document in the database through the sync function again, as though it had just been updated. This may be necessary after changing the sync function, if the new function will result in different channel assignments and access privileges.</paragraph>
					<paragraph>
					   <code>/$DB/_role/$name</code> - represents a role. This API is very similar to <code>_user</code>.</paragraph>
					<paragraph>
					   <code>/$DB/_session</code> - POST to this endpoint to create a logon session. The request body is a JSON object containing the username in the <code>name</code> object and the duration of the session (in seconds) in the <code>ttl</code> object. The response is a JSON object with properties <code>session_id</code> (the session cookie string), <code>expires</code> (the time the session expires) and <code>cookie_name</code> (the name of the HTTP cookie to set).</paragraph>
					<paragraph>
					   <code>/$DB/_user/$name</code> - represents a user account. It supports GET, PUT, and DELETE, and you can also POST to <code>/$DB/_user/</code>. The body is a JSON object; for details see the <ref href="../../2-configuration-and-administration/authorizing-users.xml#accounts">Authentication</ref> page. The special user name <code>GUEST</code> applies to unauthenticated requests.</paragraph>
					
					<note type="tip">
						A quick way to tell whether you're talking to the Admin REST API is by sending a <code>GET /</code> request and checking whether the resulting object contains an <code>"ADMIN": true</code> property.
						<ref href="../../2-configuration-and-administration/config-options-and-command-line-tool.xml">HTTP requests logged to the console</ref> show the user name of the requester after the URL. If the request is made on the admin port, this is "(ADMIN)" instead.
			  		</note>
				 </body>
			  </topic>
		   </topics>		   
      </article>
   </articles>
</guide>
