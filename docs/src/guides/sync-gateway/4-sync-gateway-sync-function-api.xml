<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="../../../../../Desktop/sync-gateway-guides/styles.css"?>
<guide xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../../docs.xsd" id="sync-function-api-guide">
    <title>Sync Function API</title>
    <description>The sync function routes documents to channels and users, and validates access to documents by users.</description>
    <introduction>In-depth look at the Sync Function API and the options available to customize your channel development.
    </introduction>
    <articles>
        
        <article id="intro">
            <title>Introduction</title>
            <description>The sync function is the core API you interact with on Sync Gateway. This
            article explains its functionality, and how you write and configure it.</description>
            <introduction>
                <paragraph>The <strong>sync function</strong> is the core API you interact with on
                Sync Gateway. For simple applications it might be the only server-side code you
                need to write. For more complex applications it is still a primary touchpoint for
                managing data routing and access control.</paragraph>
                <paragraph>The sync function is a JavaScript function whose source code is stored
                in the Sync Gateway's database configuration file. Every time a new document,
                revision or deletion is added to a database, the sync function is called and given
                a chance to examine the document. It can do the following things:</paragraph>
                <unordered-list>
                    <list-item><strong>Validate the document:</strong> If the document has invalid
                    contents, the sync function can throw an exception to reject it. The document
                    won't be added to the database, and the client request will get an error
                    response</list-item>
                    <list-item><strong>Authorize the change:</strong> The sync function can call
                    <code>requireUser()</code> or <code>requireRole()</code> to specify what
                    user(s) are allowed to modify the document. If the user making the change isn't
                    in that list, an exception is thrown and the update is rejected with an
                    error. Similarly, <code>requireChannels()</code> requires that the user making
                    the change have access to any of the listed channels.</list-item>
                    <list-item><strong>Assign the document to channels:</strong> Based on the
                    contents of the document, the sync function can call <code>channel()</code> to
                    add the document to one or more channels. This makes it accessible to users who
                    have access to those channels, and will cause the document to be pulled by
                    users that are subscribed to those channels.</list-item>
                    <list-item><strong>Grant users access to channels:</strong> Calling
                    <code>access(user, channel)</code> grants a user access to a channel. This
                    allows documents to act as membership lists or access-control lists.</list-item>
                </unordered-list>
                <note type="caution"><strong>The sync function is crucial to the security of your
                application.</strong> It's in charge of data validation, and of authorizing both
                read and write access to documents. The API is high-level and lets you do some
                powerful things very simply, but you do need to remain vigilant and review the
                function carefully to make sure that it detects threats and prevents all illegal
                access. The sync function should be a focus of any security review of your
                application.</note>
            </introduction>
            <topics>
                <topic id="arguments">
                    <title>Sync function structure</title>
                    <body>
                        <paragraph>You write your sync function in JavaScript. The basic structure of the sync function looks like this:</paragraph>
<code-block language="javascript">
function (doc, oldDoc) {
    // Your code here
}
</code-block>
                        <paragraph> The sync function arguments are: </paragraph>
                        <unordered-list>
                            <list-item><code>doc</code>: An object, the content of the document
                            that is being saved. This matches the JSON that was saved by the Couchbase
                            Lite and replicated to Sync Gateway. The <code>_id</code> property
                            contains the document ID, and the <code>_rev</code> property the new
                            revision ID. If the document is being deleted, there will be a
                            <code>_deleted</code> property with the value
                            <code>true</code>.</list-item>
                            <list-item><code>oldDoc</code>: If the document has been saved before,
                                the revision that is being replaced is available in this argument.
                                Otherwise it's <code>null</code>.
                                (In the case of a document with conflicts, the current
                                provisional winning revision is passed in <code>oldDoc</code>.) Your
                                implementation of the sync function can omit the
                                <code>oldDoc</code> parameter if you do not need it (JavaScript
                                ignores extra parameters passed to a function).</list-item>
                        </unordered-list>
                    </body>
                </topic>
                <topic id="revisions">
                    <title>The sync function and document revisions</title>
                    <body>
                        <paragraph>It's important to understand how the sync function interacts
                        with document revisions.</paragraph>
                        <paragraph>The sync function is called every time a new revision/update is
                        made to a document, and the changes to channels and access made by the sync
                        function are <emphasis>tied to that revision</emphasis>. If the document is
                        later updated, the sync function will be called again on the new revision,
                        and the new channel assignments and user/channel access
                        <emphasis>replace</emphasis> the ones from the first call.</paragraph>
                        <note>Routing changes have no effect until the document is actually
                        saved in the database, so if the sync function first calls
                        <code>channel()</code> or <code>access()</code>, but then rejects the
                        update, the channel and access changes will not occur.</note>
                        <paragraph><emphasis>Document deletions are updates!</emphasis> A deletion
                        is simply a new revision where the document body contains a
                        <code>_deleted</code> propert with the value <code>true</code>. The sync
                        function is called on deletions. Most of the time a deletion revision
                        contains no properties (other than <code>_deleted</code>), in which case
                        the sync function probably won't assign any channels or access anyway. But
                        it is possible for a client to create a deletion revision with other
                        properties in it, in which case the sync function might need to explicitly
                        test for <code>_deleted</code>.</paragraph>
                        <paragraph>If a document is in conflict there will be multiple current
                        revisions. The default, "winning" one is the one whose channel assignments
                        and access grants take effect.</paragraph>
                    </body>
                </topic>
                <topic id="default-function">
                    <title>Default sync function</title>
                    <body>
                        <paragraph> If you don't supply a sync function, Sync Gateway uses the following default sync function: </paragraph>
<code-block language="javascript">
 function (doc) {
    channel(doc.channels);
 }
</code-block>
                        <paragraph>In plain English: by default, a document will be assigned to the channels listed in its <code>channels</code> property (whose value must be a string or an array of strings.) More subtly, since there is no validation, <emphasis>any user can change any document</emphasis>. For this reason, the default sync function is really only useful for experimentation and development.</paragraph>
                    </body>
                </topic>
                <topic id="changing-function">
                    <title>Changing the sync function</title>
                    <body>
                      <paragraph>
                        The Sync Function computes assignments to roles and access to channels as documents are being
                        replicated. Upon changing the Sync Function it must process all existing documents in the bucket
                        again to update those access assignments.
                      </paragraph>
                      <paragraph>
                        The Admin REST API has a
                        <ref href="./admin-rest-api/database-resources/resync.xml">resync endpoint</ref>
                        to process every document in the database again. To update the Sync Function, it is recommended
                        to follow the steps outlined below:
                      </paragraph>
                      <ordered-list>
                        <list-item>Update the configuration file of the Sync Gateway</list-item>
                        <list-item>Restart Sync Gateway</list-item>
                        <list-item>
                          Call the
                          <ref href="./admin-rest-api/database-resources/resync.xml">resync endpoint</ref>. The message
                          body of the response contains the number of changes that were made as a result of calling
                          resync.
                        </list-item>
                      </ordered-list>
                      <paragraph>
                        This is an expensive operation because it requires every document in the database to be
                        processed by the new function. The database can't accept any requests until this process is
                        complete (because no user's full access privileges are known until all documents have been
                        scanned). Therefore the update may result in application downtime.
                      </paragraph>
                      <note>
                        When running a resync operation, the context in the Sync Function is the admin user. For that reason,
                        calling the
                        <strong>requireUser</strong>,
                        <strong>requireAccess</strong>
                        and
                        <strong>requireRole</strong>
                        methods will always succeed. It is very likely that you are using those functions in production to govern
                        write operations. But in a resync operation, all the documents are already written to the database. For
                        that reason, it is recommended to use resync for changing the assignment to channels only (i.e. reads).
                        Keep in mind that it's perfectly fine if the Sync Function in a resync operation does not ressemble the
                        Sync Function you expect to use in production. The former is only an intermediary function used in the
                        resync operation and the latter is used to process reads and writes in a production environment.
                      </note>
                      <paragraph>
                        If you need to ensure access to the database during the update, you can create a read-only
                        backup of the Sync Gateway's bucket beforehand, then run a secondary Sync Gateway on the backup
                        bucket, in read-only mode. After the update is complete, switch to the main Gateway and bucket.
                      </paragraph>
                      <paragraph>
                        In a clustered environment with multiple Sync Gateways sharing the load, all the Gateways need
                        to share the same configuration, so they all need to be taken down together. After the
                        configuration is updated,
                        <emphasis>one</emphasis>
                        instance should be brought up so it can update the database — if more than one is running at
                        this time, they'll conflict with each other. After the first instance finishes opening the
                        database, the others can be started.
                      </paragraph>
                    </body>
                </topic>
            </topics>
        </article>
        
        <article id="validation">
            <title>Validation and Authorization</title>
            <description>The sync function validates document contents, and authorizes write access
            to documents by channel, user, and role.</description>
            <introduction>
                <paragraph>The sync function API provides several methods that you can use to
                validate document creation, updates and deletions. For error conditions, you can simply call
                the built-in JavaScript <code>throw()</code> function. You can also enforce user
                access privileges by calling <code>requireUser()</code>,
                <code>requireRole()</code>, or <code>requireAccess()</code>.</paragraph>
                <paragraph>What happens to rejected documents? Firstly, they aren't saved to the
                Sync Gateway's database, so no access changes take effect. Instead an error code
                (usually 403 Forbidden) is returned to Couchbase Lite's replicator. But the endpoint
                still has the invalid document in its local database, and it's up to it to fix it.
                Instead, we recommend that you not create invalid documents in the first place.
                As much as possible, your app logic and validation
                function should prevent invalid documents from being created locally. The
                server-side sync function validation should be seen as a fail-safe and a guard
                against malicious access.</paragraph>
                <note type="caution">It's very important to understand that channels govern whether
                a user can read a document, but <emphasis>not</emphasis> whether they can write to
                it! There are legitimate use cases for being able to create documents that you
                can't read afterwards (such as drop-boxes) so the Sync Gateway doesn't prevent
                this. <strong>By default, any user can create, update or delete any
                document</strong>; it's up to your sync function to check that the user
                submitting the revision is authorized to make the change.</note>
                <paragraph>In validating a document, you'll often need to compare the new revision
                to the old one, to check for illegal changes in state. For example, some properties
                may be immutable after the document is created, or may be changeable only by
                certain users, or may only be allowed to change in certain ways. That's why the
                current document contents are given to the sync function, as the
                <code>oldDoc</code> parameter.</paragraph>

                <note type="caution">All properties of the <code>doc</code> parameter should be
                considered <emphasis>untrusted</emphasis>, since this is after all the object that
                you're validating. This may sound obvious, but it can be easy to make mistakes,
                like calling <code>requireUser(doc.owners)</code> instead of
                <code>requireUser(oldDoc.owners)</code>. When using one document property to
                validate another, look up that property in <code>oldDoc</code>, not
                <code>doc</code>!</note>

                <paragraph>Validation checks often need to treat deletions specially, because a
                deletion is just a revision with a <code>"_deleted":true</code> property and
                usually nothing else. Many types of validations won't work on a deletion because of
                the missing properties — for example, a check for a required property, or a check
                that a property value doesn't change. You'll need to skip such checks if
                <code>doc._deleted</code> is true.</paragraph>

                <paragraph>There's a complete example sync function <ref href="#example">at the end
                of this article</ref> that demonstrates how to do several types of validation and
                authorization.</paragraph>
            </introduction>
            
            <topics>
                <topic id="throw">
                    <title>throw()</title>
                    <body>
                        <paragraph>At the most basic level, the sync function can prevent a
                        document from persisting or syncing to any other users by calling
                        <code>throw()</code> with an error object containing a
                        <code>forbidden:</code> property. You enforce the validity of
                        document structure by checking the necessary constraints and throwing an
                        exception if they're not met.</paragraph>
                        <paragraph>Here is an example sync function
                        that disallows all writes to the database it is in.</paragraph>
<code-block language="javascript">
function(doc) {
   throw({forbidden: "read only!"})
}
</code-block>
                        <paragraph>The document update will be rejected with an <external-ref
                        href="http://en.wikipedia.org/wiki/HTTP_403">HTTP 403 "Forbidden" error
                        code</external-ref>, with the value of the <code>forbidden:</code> property being
                        the HTTP status message. This is the preferred way to reject an
                        update.</paragraph> <paragraph>Any other exception (including implicit ones
                        thrown by the JavaScript runtime, like array bounds exceptions) will also
                        prevent the document update, but will cause the gateway to return an <external-ref
                        href="http://en.wikipedia.org/wiki/HTTP_500">HTTP
                        500 "Internal Error"</external-ref> status.</paragraph>
                    </body>
                </topic>
                <topic id="require-user">
                    <title>requireUser(username)</title>
                    <body>
                        <paragraph>The <code>requireUser()</code> function authorizes a document
                        update by rejecting it unless it's made by a
                        specific user or users, as shown in the following example:</paragraph>
<code-block language="javascript">
// Throw an error if username is not "snej":
requireUser("snej");
                            
// Throw an error if username is not in the list:
requireUser(["snej", "jchris", "tleyden"]);
</code-block>
                        <paragraph>The function signals rejection by throwing an exception, so the
                        rest of the sync function will not be run.</paragraph>
                    </body>
                </topic>
                
                <topic id="require-role">
                    <title>requireRole(rolename)</title>
                    <body>
                        <paragraph>The <code>requireRole()</code> function authorizes a document
                        update by rejecting it unless the user making it
                        has a specific role or roles, as shown in the following example:</paragraph>
<code-block language="javascript">
// Throw an error unless the user has the "admin" role:
requireRole("admin");
                            
// Throw an error unless the user has one or more of those roles:
requireRole(["admin", "old-timer"]);                          
</code-block>
                        <paragraph>The argument may be a single role name, or an array of role names. In the latter case, the user making the change must have one or more of the given roles.</paragraph>
                        <paragraph>The function signals rejection by throwing an exception, so the
                        rest of the sync function will not be run.</paragraph>
                    </body>
                </topic>
                <topic id="require-access">
                    <title>requireAccess(channels)</title>
                    <body>
                        <paragraph> The <code>requireAccess()</code> function authorizes a document
                        update by rejecting it unless the user making it
                        has access to at least one of the given channels, as shown in the following
                        example: </paragraph>
                        <code-block language="javascript">
// Throw an exception unless the user has access to read the "events" channel:
requireAccess("events");
                            
// Throw an exception unless the user can read one of the channels in the
// previous revision's "channels" property:
if (oldDoc) {
    requireAccess(oldDoc.channels);
}
</code-block>
                        <paragraph>The function signals rejection by throwing an exception, so the
                        rest of the sync function will not be run.</paragraph>
                    </body>
                </topic>
                
                <topic id="example">
                    <title>Example</title>
                    <body>
                        <paragraph>Here's an example of a complete, useful sync function that
                        properly validates and authorizes both new and updated documents. The
                        requirements are:</paragraph>
                        <unordered-list>
                            <list-item>Only users with the role <code>editor</code> may create or
                            delete documents.</list-item>
                            <list-item>Every document has an immutable <code>creator</code>
                            property containing the name of the user who created it.</list-item>
                            <list-item>Only users named in the document's (required, non-empty)
                            <code>writers</code> property may make changes to a document, including
                            deleting it.</list-item>
                            <list-item>Every document must also have a <code>title</code> and a
                            <code>channels</code> property.</list-item>
                        </unordered-list>
                        <code-block language="javascript"><![CDATA[
                            function (doc, oldDoc) {
                                if (doc._deleted) {
                                    // Only editors with write access can delete documents:
                                    requireRole("role:editor");
                                    requireUser(oldDoc.writers);
                                    // Skip other validation because a deletion has no other properties:
                                    return;
                                }
                                // Required properties:
                                if (!doc.title || !doc.creator || !doc.channels || !doc.writers) {
                                    throw({forbidden: "Missing required properties"});
                                } else if (doc.writers.length == 0) {
                                    throw({forbidden: "No writers"});
                                }
                                if (oldDoc == null) {
                                    // Only editors can create documents:
                                    requireRole("role:editor");
                                    // The 'creator' property must match the user creating the document:
                                    requireUser(doc.creator)
                                } else {
                                    // Only users in the existing doc's writers list can change a document:
                                    requireUser(oldDoc.writers);
                                    // The "creator" property is immutable:
                                    if (doc.creator != oldDoc.creator) {
                                        throw({forbidden: "Can't change creator"});
                                    }
                                }
                                // Finally, assign the document to the channels in the list:
                                channel(doc.channels);
                            }
                        ]]></code-block>
                    </body>
                </topic>
                
            </topics>
        </article>        
        
        <article id="routing">
            <title>Routing</title>
            <description>The sync function routes documents by channel, and assigns channel access to users and roles.</description>
            <introduction>
                <paragraph>The sync function API provides several functions that you can use to
                route documents. The routing functions assign documents to channels, and enable
                user access to channels (which will route documents in those channels to those
                users.)</paragraph>
                <note>Routing changes are tied to the current revision of the document and will be
                replaced when the document is updated. Make sure to read the "Sync function and
                document revisions" section.</note>
            </introduction>
            <topics>
                <topic id="channel">
                    <title>channel (name)</title>
                    <body>
                        <paragraph> The <code>channel()</code> function routes the document to the
                        named channel(s). It accepts one or more arguments, each of which must be a
                        channel name string, or an array of strings. The channel function can be
                        called zero or more times from the sync function, for any document. Here is
                        an example that routes all "published" documents to the "public" channel:
                        </paragraph>
                        <code-block language="javascript">
function (doc, oldDoc) {
   if (doc.published) {
      channel ("public");
   } 
}
</code-block>
                        <note type="tip">As a convenience, it is legal to call <code>channel</code> with
                        a <code>null</code> or <code>undefined</code> argument; it simply does
                        nothing. This allows you to do something like
                        <code>channel(doc.channels)</code> without having to first check whether
                        <code>doc.channels</code> exists.</note>
                        <note>Channels don't have to be predefined. A channel implicitly comes into
                        existence when a document is routed to it.</note>
                        <paragraph>If the document was previously routed to a channel, but the
                        current call to the sync function (for an updated revision) doesn't route
                        it to that channel, the document is removed from the channel. This may
                        cause users to lose access to that document. If that happens, the next time
                        Couchbase Lite pulls changes from the gateway, it will receive an empty
                        revision of the document with nothing but a <code>"_removed":true</code>
                        property. (Of course the previous revisions of the document remain in your
                        Couchbase Lite database until it's compacted.)</paragraph>
                    </body>
                </topic>
                <topic id="access">
                    <title>access (username, channelname)</title>
                    <body>
                        <paragraph>The <code>access()</code> function grants access to a channel to
                        a specified user. It can be called multiple times from a sync
                        function.</paragraph> 
                        <paragraph>The first argument can be an array of strings, in which case
                        each user in the array is given access. The second argument can also be an
                        array of strings, in which case the user(s) are given access to each
                        channel in the array. As a convenience, either argument may be
                        <code>null</code> or <code>undefined</code>, in which case nothing
                        happens.</paragraph>
                        <paragraph>If a user name begins with the prefix <code>role:</code>, the
                        rest of the name is interpreted as a role rather than a user. The call then
                        grants access to the specified channels for all users with that role.
                        </paragraph>
                        <note>The effects of all access calls by all active documents are
                        effectively unioned together, so if <emphasis>any</emphasis> document
                        grants a user access to a channel, that user has access to the
                        channel.</note>
                        <note type="caution">Revoking access to a channel can cause a user to lose access to
                        documents, if s/he no longer has access to any channels those documents are
                        in. However, the replicator does <emphasis>not</emphasis> currently delete
                        such documents that have already been synced to a user's device (although
                        future changes to those documents will not be replicated.) This is a design
                        limitation of the Sync Gateway 1.0 that may be resolved in the
                        future.</note>
                        <paragraph>The following code snippets shows some valid ways to call
                        <code>access()</code>: </paragraph>
                        <code-block language="javascript">
access ("jchris", "mtv");
access ("jchris", ["mtv", "mtv2", "vh1"]);
access (["snej", "jchris", "role:admin"], "vh1");
access (["snej", "jchris"], ["mtv", "mtv2", "vh1"]);
access (null, "hbo");  // no-op
access ("snej", null);  // no-op
</code-block>
                        <paragraph>Here is an example of a sync function that grants access to a
                        channel for all the users listed in a document: </paragraph>
                        <code-block language="javascript">
function (doc, oldDoc) {
    if (doc.type == "chat_room") {
        // Give members access to the chat channel this document manages:
        access (doc.members, doc.channel_name);
                            
        // Put this document in the channel it manages:
        channel (doc.channel_name);
    }
}
</code-block>
                    </body>
                </topic>
                <topic id="role">
                    <title>role (username, rolename)</title>
                    <body>
                        <paragraph>The <code>role()</code> function grants a user a role,
                        indirectly giving them access to all channels granted to that role. It can
                        also affect the user's ability to revise documents, if the access function
                        requires role membership to validate certain types of changes. Its use is
                        similar to <code>access</code> — the value of either parameter can be a
                        string, an array of strings, or null. If the value is null, the call is a
                        no-op. </paragraph>
                        <paragraph>For consistency with the <code>access</code> call, role names
                        must always be prefixed with <code>role:</code>. An exception is thrown if
                        a role name doesn't match this. Some examples:</paragraph>
                        <code-block language="javascript">
role ("jchris", "role:admin");
role ("jchris", ["role:portlandians", "role:portlandians-owners"]);
role (["snej", "jchris", "traun"], "role:mobile");
role ("ed", null);  // no-op
</code-block>
                        <note>Roles, like users, have to be explicitly created by an administrator.
                        So unlike channels, which come into existence simply by being named, you
                        can't create new roles with a <code>role()</code> call. Nonexistent roles
                        don't cause an error, but have no effect on the user's access privileges.
                        You can create a role after the fact; as soon as a role is created, any
                        pre-existing references to it take effect. </note>
                    </body>
                </topic>
                
            </topics>
        </article>
        
    </articles>
</guide>