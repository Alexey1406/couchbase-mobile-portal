<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../../docs.xsd"
         id="performance">
   <title>Performance</title>
   <description>TODO: Add description.</description>
   <introduction>
      <paragraph>Keep in mind the following notes on performance:</paragraph>
      <unordered-list>
         <list-item>
            <paragraph>Sync Gateway nodes don't keep any local state, so they don't require any disk.</paragraph>
         </list-item>
         <list-item>
            <paragraph>Sync Gateway nodes do not cache much in RAM. Every request is handled independently. The Go programming language does use garbage collection, so the memory usage might be somewhat higher than for C code. However, memory usage shouldn't be excessive, provided the number of simultaneous requests per node is kept limited.</paragraph>
         </list-item>
         <list-item>
            <paragraph>Go is good at multiprocessing. It uses lightweight threads and asynchronous I/O. Adding more CPU cores to a Sync Gateway node can speed it up.</paragraph>
         </list-item>
         <list-item>
            <paragraph>As is typical with databases, writes are going to put a greater load on the system than reads. In particular, replication and channels imply that there's a lot of fan-out, where making a change triggers sending notifications to many other clients, who then perform reads to get the new data.</paragraph>
         </list-item>
         <list-item>
            <paragraph>We don't currently have any guidelines for how many gateway or database nodes you might need for particular workloads. We'll know more once we do more testing and tuning and get experience with real use cases.</paragraph>
         </list-item>
      </unordered-list>
   </introduction>
</article>
