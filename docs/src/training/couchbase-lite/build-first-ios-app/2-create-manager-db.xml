<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="create-manager-db">
  <title>Creating the manager and a database</title>
  <description>Create a manager and a database for CouchbaseEvents</description>
  <introduction>
    <paragraph>
      Every Couchbase Lite application needs a manager object, which manages access to databases. This section shows you
      how to create the manager and a database.
    </paragraph>

    <paragraph>
      A best practice here is to actually make the
      <code>CBLManager</code>
      and
      <code>CBLDatabase</code>
      references available to the rest of your iOS app as shared instances.
    </paragraph>
  </introduction>
  <tasks>

    <task id="couchbaseevents-class">
      <title>Create the CouchbaseEvents class</title>
      <body>
        <paragraph>
          We are going to create a system that allows the user to make events (such as a party, or a seminar), and
          update them accordingly:
        </paragraph>
        <ordered-list>
          <list-item>
            Create a new class called
            <strong>CouchbaseEvents</strong>. Set the
            <strong>Subclass of</strong>
            field to
            <strong>NSObject</strong>.
          </list-item>
          <list-item>
            In the header file, import the Couchbase Lite framework.
          </list-item>
          <list-item>
            Add an instance method called<code>helloCBL</code>.
          </list-item>
        </ordered-list>
        <code-block language="objective-c"><![CDATA[
					#import <CouchbaseLite/CouchbaseLite.h>

					@interface CouchbaseEvents : NSObject
					- (BOOL) helloCBL;
					@end
				]]>
        </code-block>

        <paragraph>
          And in the implementation, we will leave the body of the function empty for now.
        </paragraph>

        <code-block language="objective-c"><![CDATA[
					@implementation CBLObjects

					- (BOOL)helloCBL {
                        return NO;
					}

					@end
				]]>
        </code-block>

        <paragraph>
          Call the
          <code>helloCBL</code>
          method in
          <code>applicationDidFinishLaunching:withOptions:</code>
          of<code>AppDelegate.m</code>:
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          CouchbaseEvents* cbevents = [[CouchbaseEvents alloc] init];
          [cbevents helloCBL];
        ]]>
        </code-block>
      </body>
    </task>

    <task id="cbobjects-class">
      <title>Create the CBObjects class</title>
      <body>
        <paragraph>
          You will create the class to initialize and configure the database object. To do so, you will use the
          singleton pattern which will provide you with an API to access the database object from any class within your
          project.
        </paragraph>

        <paragraph>
          Right-click on the
          <strong>CouchbaseEvents</strong>
          group and select the
          <strong>New File</strong>
          menu item. Set the class name to
          <strong>CBObjects</strong>. In the header file, add a class method:
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          + (CBObjects*)sharedInstance;
        ]]>
        </code-block>

        <paragraph>
          Now go to
          <strong>CBObjects.m</strong>
          and insert this method right after the
          <strong>@implementation
          </strong>
          line:
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          + (instancetype)sharedInstance {
              static dispatch_once_t once;
              static id sharedInstance;
              dispatch_once(&once, ^{
                  sharedInstance = [[self alloc] init];
              });
              return sharedInstance;
          }
        ]]>
        </code-block>

        <paragraph>
          There's a lot going on in this short method: you're using Grand Central Dispatch (GCD) to execute a block
          which initializes an instance of
          <strong>CBObjects</strong>
          . This is the essence of the Singleton design pattern: the initializer is never called again once the class
          has been instantiated.
        </paragraph>

        <paragraph>
          Next, you will instantiate the
          <strong>Manager</strong>
          and
          <strong>Database</strong>
          objects. In
          <strong>CBObjects.h</strong>
          , import the framework:
        </paragraph>
        <code-block language="objective-c"><![CDATA[
          #import <CouchbaseLite/CouchbaseLite.h>
        ]]>
        </code-block>
        <paragraph>
          And add following properties:
        </paragraph>
        <code-block language="objective-c"><![CDATA[
					@property (nonatomic, strong) CBLDatabase *database;
					@property (nonatomic, strong) CBLManager *manager;
				]]>
        </code-block>

        <paragraph>
          In
          <strong>CBObjects.m</strong>
          , add the
          <strong>init</strong>
          method:
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          - (id)init {
              self = [super init];
              if (self) {
                  NSError *error;
                  self.manager = [CBLManager sharedInstance];
                  if (!self.manager) {
                      NSLog(@"Cannot create shared instance of CBLManager");
                      return nil;
                  }
                  self.database = [self.manager databaseNamed:@"couchbaseevents" error:&error];
                  if (!self.database) {
                      NSLog(@"Cannot create database. Error message: %@", error.localizedDescription);
                      return nil;
                  }
              }
              return self;
          }
				]]>
        </code-block>

        <paragraph>
          You can build and run the application but nothing is read or written to the database. In the next section, you
          will learn how to persist documents.
        </paragraph>
      </body>
    </task>

  </tasks>
</lesson>
