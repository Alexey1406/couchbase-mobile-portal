<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="do-crud">
  <title>Performing CRUD operations</title>
  <description>Create, read, update, and delete documents</description>
  <introduction>
    <paragraph>
      CRUD operations represent the basic interactions with a Couchbase Lite database. This section demonstrates how to
      create, retrieve, update, and delete documents. The tutorial code creates just one document and then in turn reads
      it, updates it, and finally deletes it from the database.
    </paragraph>

    <paragraph>
      In this section, you will add the code snippets to the implementation file of the
      <strong>CouchbaseEvents</strong>
      class.
    </paragraph>
  </introduction>

  <tasks>

    <task id="create-document">
      <title>Create a document</title>
      <body>

        <paragraph>
          In
          <strong>CouchbaseEvents.h</strong>, add the following method:
        </paragraph>

        <code-block language="objective-c"><![CDATA[
					// creates the Document
					- (NSString *)createDocument: (CBLDatabase *)database {
							NSError *error;  

							// create an object that contains data for the new document 
							NSDictionary *myDictionary = @{ @"name"     :  @"Big Party", 
														   @"location" :  @"My House" 
														  };  

							// Create an empty document 
							CBLDocument *doc = [database createDocument];  

							// Save the ID of the new document 
							NSString *docID = doc.documentID;  

							// Write the document to the database 
							CBLRevision *newRevision = [doc putProperties: myDictionary error: &error];

							if (newRevision) {
								NSLog(@"Document created and written to database, ID = %@", docID);
							}

							return docID;
					}
				]]>
        </code-block>

        <unordered-list>
          <list-item>
            The
            <code>putProperties</code>
            method saves the passed in parameter data from the
            <code>NSDictionary</code>
            to the Couchbase Lite database on the local device.
          </list-item>
          <list-item>
            Replication is never invoked by this
            <code>putProperties</code>
            method, as we will find out later when we configure the Sync Gateway and the push and pull replication
            methods.
          </list-item>
        </unordered-list>

        <paragraph>
          Call this method in
          <code>helloCBL</code>
          and save the return value (document ID) in a new variable called
          <strong>docID</strong>
          of type
          <strong>NSString</strong>
          .
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          NSString* docID = [self createDocument:CBObjects.sharedInstance.database];
        ]]>
        </code-block>

        <paragraph>
          Build and run the app. You should see the logs that indicate the document was created and persisted
          successfully:
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          CouchbaseEvents[15199:1866151] Document created and written to database, ID = -Da-TEzxl__PrUjz6U3rbqY
        ]]>
        </code-block>

      </body>
    </task>

    <task id="update">
      <title>Update a document</title>
      <body>

        <paragraph>
          First you will explore the process of updating an existing document and then you will look closely at adding
          an attachment to that document.
        </paragraph>

        <paragraph>
          In<strong>CouchbaseEvents.m</strong>, add the following method:
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          - (BOOL) updateDocument:(CBLDatabase *) database documentId:(NSString *) documentId {
              // 1. Retrieve the document from the database
              CBLDocument *getDocument = [database documentWithID: documentId];
              // 2. Make a mutable copy of the properties from the document we just retrieved
              NSMutableDictionary *docContent = [getDocument.properties mutableCopy];
              // 3. Modify the document properties
              docContent[@"description"] = @"Anyone is invited!";
              docContent[@"address"] = @"123 Elm St.";
              docContent[@"date"] = @"2014";
              // 4. Save the Document revision to the database
              NSError *error;
              CBLSavedRevision *newRev = [getDocument putProperties:docContent error:&error];
              if (!newRev) {
                  NSLog(@"Cannot update document. Error message: %@", error.localizedDescription);
              }
              // 5. Display the new revision of the document
              NSLog(@"The new revision of the document contains: %@", newRev.properties);
              return YES;
          }
				]]>
        </code-block>

        <paragraph>
          Here's the breakdown of what is happening:
        </paragraph>

        <ordered-list>
          <list-item>
            You first need to retrieve the original document before you can update its content.
          </list-item>
          <list-item>
            You then create a mutable copy of the CBLDocument's properties (data) you wish to update.
          </list-item>
          <list-item>
            With a mutable copy of the
            <strong>properties</strong>
            dictionary, you add a
            <strong>description</strong>
            and
            <strong>address</strong>
            .
          </list-item>
          <list-item>
            Lastly you put the
            <strong>NSMutableDictionary</strong>
            of properties back into the document as a set of properties with the call to the
            <strong>putProperties</strong>
            method.
          </list-item>
        </ordered-list>

        <note>
          It would be easy to think that all that happens here is that the Document object is updated with data, but in
          fact this causes that document to be stored in the local database. This is also different from the data being
          replicated to the Sync Gateway. So far, there is no Sync Gateway involved. We will cover that later. This is
          currently all local data on the device only.
        </note>

        <paragraph>
          Call this method in
          <code>helloCBL</code>
          below
          <code>createDocument:</code>:
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          NSString* docID = [self createDocument:CBObjects.sharedInstance.database];
          [self updateDocument:CBObjects.sharedInstance.database documentId:docID];
        ]]>
        </code-block>

        <paragraph>
          Build and run. You should additional information in the debugger to indicate the update operation was
          successful:
        </paragraph>
        
        <image href="images/logs-update-doc.png" width="100%" alt="Couchbase Lite update a document"/>

      </body>
    </task>

    <task id="saving-attachment">
      <title>Saving an attachment</title>
      <body>

        <paragraph>
          We can also add a binary attachment. As a reminder, this attachment can only be read by the Couchbase Lite
          (CBL) API:
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          - (BOOL) addAttachment: (CBLDatabase *) database documentId: (NSString *) documentId {
              NSError *error;
              // 1
              CBLDocument *getDocument = [database documentWithID: documentId];
              // 2
              const unsigned char bytes[] = {0, 0, 0, 0, 0};
              NSData *zerosData = [NSData dataWithBytes: bytes length: sizeof(bytes)];
              // 3
              CBLUnsavedRevision *unsavedRev = [getDocument.currentRevision createRevision];
              [unsavedRev setAttachmentNamed: @"zeros.bin"
                             withContentType: @"application/octet-stream" content: zerosData];
              // 4
              CBLSavedRevision *newRev = [unsavedRev save: &error];
              NSLog(@"The new revision of the document contains: %@", newRev.properties);
              return YES;
          }
				]]>
        </code-block>

        <paragraph>
          Here's what is happening in the code above:
        </paragraph>

        <ordered-list>
          <list-item>
            Retrieve the document from the database by using the
            <strong>documentWithID</strong>
            method.
          </list-item>
          <list-item>
            Create an
            <strong>NSData</strong>
            object to hold the binary (attachment) data. Of course this is mock data, but it satisfies our proof of
            concept for this tutorial.
          </list-item>
          <list-item>
            Create and unsaved revision and add the mock data as an attachment on the unsaved revision.
          </list-item>
          <list-item>
            Call the
            <strong>save</strong>
            on the unsaved revision and log the new revision content to the console.
          </list-item>
        </ordered-list>

        <paragraph>
          Call this method in
          <code>helloCBL</code>
          :
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          NSString* docID = [self createDocument:CBObjects.sharedInstance.database];
          [self updateDocument:CBObjects.sharedInstance.database documentId:docID];
          [self addAttachment:CBObjects.sharedInstance.database documentId:docID];
        ]]>
        </code-block>

        <paragraph>
          Build and run. You will see additional content in the console output. Notice the
          <strong>_attachments</strong>
          key, this holds the metadata of the attachment that is stored in binary format on the filesystem:
        </paragraph>

        <image href="images/logs-attachment.png" alt="Couchbase Lite adding an attachment" width="100%"/>

      </body>
    </task>

    <task id="delete-document">
      <title>Delete a document</title>

      <body>

        <paragraph>
          In this section of the tutorial, we will learn how to delete the document that was previously saved to the
          database. In
          <strong>CouchbaseEvents.m</strong>
          add a new method called
          <code>deleteDocument:</code>:
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          - (BOOL) deleteDocument:(CBLDatabase*) database documentId:(NSString*) documentId {
              CBLDocument* document = [database documentWithID:documentId];
              NSError* error;
              [document deleteDocument:&error];
              if (!error) {
                  NSLog(@"Deleted document, deletion status is %d", [document isDeleted]);
                  return YES;
              }
              return NO;
          }
				]]>
        </code-block>

        <paragraph>
          Call this method in <code>helloCBL</code>:
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          NSString* docID = [self createDocument:CBObjects.sharedInstance.database];
          [self updateDocument:CBObjects.sharedInstance.database documentId:docID];
          [self addAttachment:CBObjects.sharedInstance.database documentId:docID];
          [self deleteDocument:CBObjects.sharedInstance.database documentId:docID];
        ]]>
        </code-block>

        <paragraph>
          Build and run. Check in the console output that the document was successfully deleted:
        </paragraph>

        <code-block language="objective-c"><![CDATA[
          CouchbaseEvents[19058:2041211] Deleted document, deletion status is 1
        ]]>
        </code-block>

        <paragraph>
          At this stage, you have persisted several documents to the database. In the next section, you will download
          and run Sync Gateway on your host machine to sync those documents.
        </paragraph>

      </body>

    </task>

  </tasks>
</lesson>
