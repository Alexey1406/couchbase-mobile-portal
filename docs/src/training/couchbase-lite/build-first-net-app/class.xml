<?xml version="1.0" encoding="UTF-8"?>
<class xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="build-first-net-app">
	<title>Building your first Couchbase Lite .NET app for iOS</title>
	<description>Tutorial for building a Couchbase Lite .NET app for an iOS device</description>

	<introduction>
		<paragraph>This tutorial shows you how to use Couchbase Lite .NET in your iOS apps. The tutorial
			assumes you already know how to develop iOS apps with Xamarin and have Xamarin Studio installed on
			your computer. </paragraph>
	
		<paragraph>The tutorial walks through creating a simple Hello World-style app called HelloCBL. By following the tutorial, you'll learn how to create a new Couchbase Lite iOS app, create a database, and interact with the database by using basic CRUD (create, read, update, and delete) operations.</paragraph>
		
		<paragraph>To make it easier to learn the basics and get started with Couchbase Lite, the program structure is highly simplified. HelloCBL does not have a UI and all code is placed in the application delegate class, <code>HCAppDelegate</code>. All output is sent to the Xcode console rather than the iPhone screen in the simulator. Rest assured, the other sample iOS apps that we provide do not take these shortcutsâ€”they incorporate standard iOS software design and development practices.</paragraph>
				
		<paragraph>
			You can follow along with the tutorial and build the HelloCBL app yourself, or you can <external-ref href="https://github.com/couchbaselabs/couchbase-lite-tutorial-ios">download the HelloCBL code</external-ref> from GitHub.
		</paragraph>
	</introduction>
	<lessons>
		
		<xi:include href="create-project.xml"/>
		
		<lesson id="create-database">
         <title>Creating a manager and a database</title>
         <description>Create a manager and a database for HelloCBL</description>
         <introduction>
            <paragraph>TBD</paragraph>
         </introduction>

         <tasks>
            <task id="manager">
               <title>Create a Manager</title>
               <body>
                <ordered-list>
                   <list-item>Add the following code to the <code>FinishedLaunching</code> method.</list-item>
                   
                   <unordered-list>
                      <list-item><code-block>// Create a shared manager</code-block></list-item>
                      <list-item><code-block>var manager = Manager.SharedInstance;</code-block></list-item>
                      <list-item><code-block>Debug.Assert(manager != null);</code-block></list-item>
                      <list-item><code-block>Console.WriteLine("Manager created");</code-block></list-item>
                      <note>
                         <type>note</type>The statement 'using System.Diagnostics' is required for the <code>Debug.Assert</code> method call.</note> 
                       
                   </unordered-list>
                   
                   <list-item>Select the Debug scheme and your desired iPhone Simulator. Click <strong>Run</strong> to run the application.</list-item>
                   <list-item>View the Application Output. It includes a message similar to the following one that says the run was successful:</list-item>
                   <paragraph><code-block>2014-09-30 20:02:34.911 HelloCBL[11943:302721] Manager created</code-block></paragraph>
                    
                </ordered-list>  
                  
               </body>
            </task>

            <task id="database">
               <title>Create a Database</title>
               <body>
                  <ordered-list>
                     <list-item>Add the following code to the <code>FinishedLaunching</code> method after the code that creates the manager.
                        </list-item>
                     
                     <unordered-list>
                        <list-item><code-block>var dbName = "hello";</code-block></list-item>
                        <list-item><code-block>Debug.Assert(Manager.IsValidDatabaseName(dbName));
                        </code-block></list-item>
                        <list-item><code-block>var database = manager.GetDatabase(dbName);</code-block></list-item>
                        <list-item><code-block>Debug.Assert(database != null);</code-block></list-item>
                       
                     </unordered-list>
                     <paragraph>The code snippet sets up and validates a name for the database and then creates the database. 
                        It is important to validate the database name because it must conform to the following rules:</paragraph>
                     <unordered-list>
                        <list-item>The database name must begin with a lowercase letter.</list-item>
                        <list-item>The database name must contain only valid characters. The following characters are valid in database names:</list-item>
                        
                        <unordered-list> 
                           <list-item># Lowercase letters: a-z</list-item>
                           <list-item># Numbers: 0-9</list-item>
                           <list-item># Special characters: _$()+-/</list-item>
                        </unordered-list>
                  
                        </unordered-list>
                     
                     <list-item>Run the application.</list-item>
                     <list-item>View the Application Output. It includes a message similar to the following one that indicates the database was created:</list-item>
                     <paragraph><code-block>2014-09-30 20:15:49.473 HelloCBL[12161:314012] Database created</code-block></paragraph>
                     
                  </ordered-list>  
                  
               </body>
            </task>
         </tasks>
      </lesson>
      
 
      
      <lesson id="crud">
         <title>Performing a CRUD Operations</title>
         <description>This section explains how to create, retrieve, update, and delete a document.</description>
         
         <tasks>
            <task id="create">
               <title>Create a Document</title>
               <body>
                  <ordered-list>
                     <list-item> Add the following code to the FunishedLaunching method.
                        
                        <paragraph><code-block> var properties = new Dictionary &lt;string, object&gt;()
                           {
                           {"message", "Hello Couchbase Lite"},
                           {"created_at", DateTime.UtcNow.ToString("o")},
                           };
                           
                           var document = database.CreateDocument();
                           Debug.Assert(document != null);
                           
                           var revision = document.PutProperties(properties);
                           Debug.Assert(revision != null);
                           
                           var docId = document.Id;
                           Console.WriteLine("Document created with ID = {0}", docId);</code-block></paragraph>
                       

                     </list-item>Run the application. <list-item>
                       
                     </list-item>View the Application Output. The Application Output includes a message similar to the following one that indicates the document was created.
                     <paragraph><code-block> 2014-09-30 20:29:52.355 HelloCBL[12616:326285] Document created with ID: 43361e17-156f-4298-8822-19f5c2fbd86b</code-block></paragraph>
                      
                  </ordered-list>
               </body>
            </task>
            
            
         
           <task id="retrieve">
               <title>Retrieve a Document</title>
              <body>
                 <ordered-list>
                    <list-item> Add the following code to the FunishedLaunching method.
                       
                       <paragraph><code-block> var retrievedDocument = database.GetDocument(docId);
                          
                          Console.WriteLine("Retrieved document: ");
                          foreach (var kvp in retrievedDocument.Properties)
                          {
                          Console.WriteLine("{0} : {1}", kvp.Key, kvp.Value);
                          }
                           </code-block></paragraph>   
                          
                    </list-item>Run the application. <list-item>
                       
                    </list-item>View the Application Output. The Application Output includes messages similar to the following one below.
                    <paragraph><code-block> 2014-09-30 20:38:10.102 HelloCBL[12763:333350] Retrieved document: 
                       2014-09-30 20:38:10.119 HelloCBL[12763:333350] message : Hello Couchbase Lite
                       2014-09-30 20:38:10.119 HelloCBL[12763:333350] created_at : 9/30/2014 1:38:10 PM
                       2014-09-30 20:38:10.119 HelloCBL[12763:333350] _id : 0c4b729b-02f2-4a7c-a538-1a39ff7e36c5
                       2014-09-30 20:38:10.119 HelloCBL[12763:333350] _rev : 1-8288BD9742C885DF11734DCFD4F14998</code-block></paragraph>
                      
                 </ordered-list>
              </body>
            </task>

            <task id="update">
               <title>Update a Document</title>
               <body>
                  <ordered-list>
                     <list-item> Add the following code to the FunishedLaunching method.</list-item>
                        
                        <paragraph><code-block> // Update a document
                           var updatedProperties = new Dictionary&lt;string, object&gt;(retrievedDocument.Properties);
                              updatedProperties["message"] = "We're having a heat wave!";
                              updatedProperties["temperature"] = 95.0;
                              
                              var updatedRevision = retrievedDocument.PutProperties(updatedProperties);
                              Debug.Assert(updatedRevision != null);
                              
                              Console.WriteLine("Updated document: ");
                              foreach (var kvp in updatedRevision.Document.Properties)
                              {
                              Console.WriteLine("{0} : {1}", kvp.Key, kvp.Value);
                              }
                           </code-block> </paragraph>
                           
                           <list-item>Run the application.</list-item> 
                           <list-item>View the Application Output. It includes messages similar to the following one below:</list-item>
                           <paragraph><code-block> 
                              2014-09-30 20:52:34.414 HelloCBL[12989:344732] Updated document: 
                              2014-09-30 20:52:34.414 HelloCBL[12989:344732] message : We're having a heat wave!
                              2014-09-30 20:52:34.414 HelloCBL[12989:344732] created_at : 9/30/2014 1:52:34 PM
                              2014-09-30 20:52:34.414 HelloCBL[12989:344732] _id : a780c77b-ccfa-495e-8100-aed3cae64ec2
                              2014-09-30 20:52:34.414 HelloCBL[12989:344732] _rev : 2-A2C30E1FDAE634A9C345ECEE665CE0B4
                              2014-09-30 20:52:34.415 HelloCBL[12989:344732] temperature : 95  
                              
                              </code-block> </paragraph>  
                              
                  </ordered-list>
               </body>
            </task>
         
            <task id="delete">
               <title>Delete a Document</title>
               <body>
                  <ordered-list>
                     <list-item> Add the following code to the FunishedLaunching method.
                        
                        <paragraph><code-block> v// Delete a document
                           retrievedDocument.Delete();
                           Console.WriteLine("Deleted document, deletion status: {0}", retrievedDocument.Deleted);
                        </code-block></paragraph>
                           
                     </list-item>Run the application. <list-item>
                        
                     </list-item>View the Application Output. Itincludes messages similar to the following one below.
                     <paragraph><code-block> 2014-09-30 20:59:24.479 HelloCBL[13091:350437] Deleted document, deletion status: True
                     </code-block></paragraph>
                     
                  </ordered-list>
               </body>
            </task>  
         
         
         
         </tasks>

      </lesson>
	</lessons>
</class>
