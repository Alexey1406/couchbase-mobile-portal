<?xml version="1.0" encoding="UTF-8"?>
<class xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="../../../docs.xsd" id="build-first-dotnet-app">
	<title>Building your first Couchbase Lite with .NET and WPF</title>
	<description>Tutorial for building a Couchbase Lite app for .NET using WPF</description>

	<introduction>
		<paragraph>This tutorial shows you how to use Couchbase Lite in your WPF apps and includes instructions for getting started with the Visual Studio development environments. This tutorial assumes you are familiar with developing software for Windows using WPF. If you are new to WPF development, take a look at the 
			<external-ref href="https://msdn.microsoft.com/en-us/library/ms754130(v=vs.110).aspx">documentation</external-ref> in the Microsoft Developer Network before beginning to work with Couchbase Lite.</paragraph>
				
		<paragraph>The tutorial walks through creating a simple Couchbase Lite app. By following the tutorial, you will learn how to create a new Couchbase Lite WPF app, create a database, and interact with the database by using basic CRUD (create, read, update, and delete) operations.</paragraph>
		
		<paragraph>To make it easier to learn the basics and get started with Couchbase Lite, the program structure is highly simplified. In the HelloWorld example app, there is no UI and all code is placed in the <code>MainWindow</code> class.</paragraph>
				
		<paragraph>
			You can follow along with the tutorial and build the CouchbaseEvent app yourself, or you can <external-ref href="https://github.com/couchbaselabs/couchbase-lite-tutorial-dotnet">download the CouchbaseEvent code</external-ref> from GitHub.
		</paragraph>
	</introduction>
	<lessons>
		<xi:include href="create-project.xml"/>
		
		<lesson id="create-database">
			<title>Creating the manager and a database</title>
			<description>Create a manager and a database for HelloCBL</description>
			<introduction>
				<paragraph>Every Couchbase Lite application needs a manager object, which manages access to databases. This section shows you how to create the manager and a
			database.</paragraph>
			</introduction>
			<tasks>
				<task id="manager">
					<title>Create a manager</title>
					<body>
						<ordered-list>
							<list-item>
								Add the following code to the <code>FinishedLaunching</code> (for iOS) or <code>OnCreate</code> (for Android) method.
								<code-block>
									// Create a shared manager
									var manager = Manager.SharedInstance;
									Console.WriteLine("Manager created");
								</code-block>
							</list-item>
							<list-item>Select the Debug scheme and your desired iPhone Simulator. Click <strong>Run</strong> to run the application.</list-item>
							<list-item>View the Application Output. It includes a message similar to the following one that says the run was successful:
								<code-block>2014-09-30 20:02:34.911 HelloCBL[11943:302721] Manager created</code-block>
							</list-item>
						</ordered-list>
					</body>
				</task>
				<task id="database">
					<title>Create a database</title>
					<body>
						<ordered-list>
							<list-item>Add the following code to the <code>FinishedLaunching</code> or <code>OnCreate</code> method after the code that creates the Manager.
								<code-block>
									// Create database
									var dbName = "hello";
									var database = manager.GetDatabase(dbName);
									Console.WriteLine("Database created");
								</code-block>
								
								<paragraph>The code snippet sets up and validates a name for the database and then creates the database. 
									It is important to validate the database name because it must conform to the following rules:</paragraph>
								<unordered-list>
									<list-item>The database name must begin with a lowercase letter.</list-item>
									<list-item>The database name must contain only valid characters. The following characters are valid in database names:
										<unordered-list>
											<list-item>Lowercase letters: a-z</list-item>
											<list-item>Numbers: 0-9</list-item>
											<list-item>Special characters: _$()+-/</list-item>
										</unordered-list>
									</list-item>
								</unordered-list>
							</list-item>
							<list-item>Run the application.</list-item>
							<list-item>View the Application Output. It includes a message similar to the following one that indicates the database was created:
								<code-block>2014-09-30 20:15:49.473 HelloCBL[12161:314012] Database created</code-block>
							</list-item>
						</ordered-list>
					</body>
				</task>
			</tasks>
		</lesson>
		<lesson id="crud">
			<title>Performing CRUD operations</title>
			<description>Create, retrieve, update, and delete documents in the HelloCBL database</description>
			<introduction>
				<paragraph>CRUD operations represent the basic interactions with a Couchbase Lite database. This section demonstrates how to create, retrieve, update, and delete documents. The tutorial code creates just one document and then in turn retrieves it, updates it, and finally deletes it.</paragraph>
			</introduction>
			<tasks>
				<task id="create">
					<title>Create a document</title>
					<body>
						<ordered-list>
							<list-item> Add the following code to the <code>FinishedLaunching</code> or <code>OnCreate</code> method.
								
								<code-block> // Create a document
 var properties = new Dictionary &lt;string, object&gt;()
 {
   {"message", "Hello Couchbase Lite"},
   {"created_at", DateTime.UtcNow.ToString("o")},
 };
									
 var document = database.CreateDocument();
									
 var revision = document.PutProperties(properties);
									
 var docId = document.Id;
 Console.WriteLine("Document created with ID = {0}", docId);</code-block>
								<paragraph>You will also need to add <code>using System.Collections.Generic</code> statement in order to use the Dictionary class.</paragraph>			
							</list-item>
							<list-item>Run the application. </list-item>
							<list-item>View the Application Output. The Application Output includes a message similar to the following one that indicates the document was created.
								<code-block> 2014-09-30 20:29:52.355 HelloCBL[12616:326285] Document created with ID: 43361e17-156f-4298-8822-19f5c2fbd86b</code-block></list-item>
						</ordered-list>
					</body>
				</task>
				<task id="retrieve">
					<title>Retrieve a document</title>
					<body>
						<ordered-list>
							<list-item> Add the following code to the <code>FinishedLaunching</code> or <code>OnCreate</code> method.
								
								<code-block> var retrievedDocument = database.GetDocument(docId);
									
 Console.WriteLine("Retrieved document: ");
 foreach (var kvp in retrievedDocument.Properties)
 {
   Console.WriteLine("{0} : {1}", kvp.Key, kvp.Value);
 }</code-block>   
								
							</list-item>
							<list-item>Run the application. </list-item>
							<list-item>View the Application Output. The Application Output includes messages similar to the following one below.
								<code-block> 2014-09-30 20:38:10.102 HelloCBL[12763:333350] Retrieved document: 
 2014-09-30 20:38:10.119 HelloCBL[12763:333350] message : Hello Couchbase Lite
 2014-09-30 20:38:10.119 HelloCBL[12763:333350] created_at : 9/30/2014 1:38:10 PM
 2014-09-30 20:38:10.119 HelloCBL[12763:333350] _id : 0c4b729b-02f2-4a7c-a538-1a39ff7e36c5
 2014-09-30 20:38:10.119 HelloCBL[12763:333350] _rev : 1-8288BD9742C885DF11734DCFD4F14998</code-block>
							</list-item>
						</ordered-list>
					</body>
				</task>
				<task id="update">
					<title>Update a document</title>
					<body>
						<ordered-list>
							<list-item> Add the following code to the <code>FinishedLaunching</code> or <code>OnCreate</code> method.
								
								<code-block> // Update a document
 var updatedProperties = new Dictionary&lt;string, object&gt;(retrievedDocument.Properties);
 updatedProperties["message"] = "We're having a heat wave!";
 updatedProperties["temperature"] = 95.0;
									
 var updatedRevision = retrievedDocument.PutProperties(updatedProperties);
 Debug.Assert(updatedRevision != null);
									
 Console.WriteLine("Updated document: ");
 foreach (var kvp in updatedRevision.Document.Properties)
 {
   Console.WriteLine("{0} : {1}", kvp.Key, kvp.Value);
 }</code-block>
							</list-item>
							<list-item>Run the application.</list-item>
							<list-item>View the Application Output. It includes messages similar to the following one below:
								<code-block> 2014-09-30 20:52:34.414 HelloCBL[12989:344732] Updated document: 
 2014-09-30 20:52:34.414 HelloCBL[12989:344732] message : We're having a heat wave!
 2014-09-30 20:52:34.414 HelloCBL[12989:344732] created_at : 9/30/2014 1:52:34 PM
 2014-09-30 20:52:34.414 HelloCBL[12989:344732] _id : a780c77b-ccfa-495e-8100-aed3cae64ec2
 2014-09-30 20:52:34.414 HelloCBL[12989:344732] _rev : 2-A2C30E1FDAE634A9C345ECEE665CE0B4
 2014-09-30 20:52:34.415 HelloCBL[12989:344732] temperature : 95  </code-block>
							</list-item>
						</ordered-list>
					</body>
				</task>
				<task id="delete">
					<title>Delete a document</title>
					<body>
						<ordered-list>
							<list-item> Add the following code to the <code>FinishedLaunching</code> or <code>OnCreate</code> method.
								
								<code-block> // Delete a document
 retrievedDocument.Delete();
 Console.WriteLine("Deleted document, deletion status: {0}", retrievedDocument.Deleted);</code-block>
								
							</list-item>
							<list-item>Run the application. </list-item>
							<list-item>View the Application Output. It includes messages similar to the following one.
								<code-block> 2014-09-30 20:59:24.479 HelloCBL[13091:350437] Deleted document, deletion status: True</code-block>
							</list-item>
						</ordered-list>
					</body>
				</task>
			</tasks>
		</lesson>
		<xi:include href="1-get-started-vs.xml"/>
		<xi:include href="2-starter-code-wpf.xml" />
		<xi:include href="3-do-crud.xml"/>
		<xi:include href="4-add-sync-gateway.xml"/>
		<xi:include href="5-couchbase-lite-views.xml"/>
		<xi:include href="6-understanding-live-query.xml"/>
	</lessons>
</class>
