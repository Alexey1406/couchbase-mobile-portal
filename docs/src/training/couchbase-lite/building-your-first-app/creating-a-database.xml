<?xml version="1.0" encoding="UTF-8"?>
<lesson xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../../../../docs.xsd" id="creating-a-database">
    <title>Creating a Database</title>
    <description>Learn how to create a Couchbase Lite database.</description>
    <introduction>
        <paragraph>This tutorial demonstrates:</paragraph>
        <unordered-list>
            <list-item>Creating a database</list-item>
        </unordered-list>
    </introduction>
    <tasks>
        <task id="creating-a-database">
            <title>Creating a database</title>
            <body>
            <paragraph>A Couchbase Lite Database is a collection of Documents, and serves as a namespace to look them up by their unique document IDs. The Database supports the typical CRUD operations (create, read, update, and delete). To create and use a Couchbase Lite Database, you need a top-level Couchbase Lite object called a Manager. A Manager manages a collection of Couchbase Lite Databases.</paragraph>
            <paragraph>As mentioned earlier, we are using a demo app called HelloCBL to demonstrate the basics of Couchbase Lite concepts. In the introduction, you saw how to import Couchbase Lite to your project.</paragraph>
            <paragraph>After having imported Couchbase Lite to your project, add the following code just before the <code>return</code> statement at the end of the <code>application:didFinishLaunchingWithOptions:</code> method:</paragraph>
            <code-block language="objective-c">
                // Run the method that creates a database, and then stores and retrieves a document
                BOOL result = [self sayHello];
                NSLog (@"This Hello Couchbase Lite run %@!", (result ? @"was a total success" : @"was a dismal failure"));
            </code-block>
            <paragraph>The first line calls the <code>sayHello</code> method, which demonstrates use of the basic Couchbase Lite concepts in real code. The second line executes after the return from the <code>sayHello</code> method and prints a message on the console that indicates whether the run was successful.</paragraph>
            <paragraph>Just before the <code>@end</code> statement at the end of the file, add the following method:</paragraph>
            <code-block language="objective-c">
                
                - (BOOL) sayHello {
                
                // holds error error messages from unsuccessful calls
                NSError *error;
                
                // create a shared instance of CBLManager
                CBLManager *manager = [CBLManager sharedInstance];
                if (!manager) {
                NSLog (@"Cannot create shared instance of CBLManager");
                return NO;
                }
                
                // create a name for the database and make sure the name is legal
                NSString *dbname = @"my-new-database";
                if (![CBLManager isValidDatabaseName: dbname]) {
                NSLog (@"Bad database name");
                return NO;
                }
                
                // create a new database
                CBLDatabase *database = [manager databaseNamed: dbname error: error];
                if (!database) {
                NSLog (@"Cannot create database. Error message: %@", error.localizedDescription);
                return NO;
                }
                
                ...
                }
            </code-block>
            <paragraph>The <code>sayHello</code> method creates a new database, and then creates a document, stores the document in the database, and retrieves the document. This section contains additional notes that supplement the comments in the code.</paragraph>
            <paragraph>The <code>sayHello</code> method creates a shared <code>CBLManager</code> object that manages a collection of databases. The CBLManager object can be used only in a single thread.</paragraph>
            <paragraph>After <code>sayHello</code> creates a name for the new database, it validates the name. A database name can consist of only lowercase alphabetic characters (a-z), digits (0-9) and a few special characters (_$()+-/), so it's important to validate the name.</paragraph>
            <paragraph>To create the database, it calls <code>createDatabaseNamed:error</code>, which is a method in the <code>CBLManager</code> class that returns a <code>CBLDatabase</code> object. Immediately after the call, it checks to make sure the database was created.</paragraph>
            </body>
        </task>
    </tasks>
</lesson>
