<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="../../docs.xsd" 
     id="todo-lite">
     <title>ToDo Lite Example App</title>
     <description>Task list manager with sharing and photos.</description>
     <introduction>
          <paragraph>This ToDo Lite application is available in the 
               <external-ref href="https://itunes.apple.com/us/app/todo-lite-sync/id697235451?mt=8">iOS</external-ref> 
               and <external-ref href="https://play.google.com/store/apps/details?id=com.couchbase.todolite">Android</external-ref> 
               app stores, so you can install it easily. Or follow the per-platform build instructions in the getting started 
               documentation, which will get you set up with a local development copy of ToDo Lite in your language.</paragraph>
     </introduction>
     <topics>
          
          <topic id="application-launch">
               <title>Application Launch</title>
               <body>
                    <paragraph>
                         Each mobile environment has it's own style of application initialization. This is where you
                         initialize resources that need to last the lifetime of the application. For instance, there 
                         are usually a few lines of code that initialize Couchbase Lite and your data model.
                    </paragraph>
                    <code-set>
                   <code-block language="objective-c"><![CDATA[
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    // Override point for customization after application launch.
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
        UISplitViewController *splitViewController = (UISplitViewController *)self.window.rootViewController;
        UINavigationController *navigationController = [splitViewController.viewControllers lastObject];
        splitViewController.delegate = (id)navigationController.topViewController;
    }
    CBLManager *manager = [CBLManager sharedInstance];
    NSError *error;
    self.database = [manager databaseNamed:@"todos" error:&error];
    if (error) {
        NSLog(@"error getting database %@",error);
        exit(-1);
    }
    // todo validation should go in the model?
    [[self.database modelFactory] registerClass:[List class] forDocumentType:@"list"];
    [[self.database modelFactory] registerClass:[Task class] forDocumentType:@"item"];
    
    // Configure sync and trigger it if the user is already logged in.
    [self setupCBLSync];

    return YES;
}
                      ]]></code-block>
                    <code-block language="java"><![CDATA[
    private void initDatabase() {
        try {
            Manager.enableLogging(Log.TAG, Log.VERBOSE);
            Manager.enableLogging(Log.TAG_SYNC, Log.DEBUG);
            Manager.enableLogging(Log.TAG_QUERY, Log.DEBUG);
            Manager.enableLogging(Log.TAG_VIEW, Log.DEBUG);
            Manager.enableLogging(Log.TAG_DATABASE, Log.DEBUG);

            manager = new Manager(new AndroidContext(getApplicationContext()), Manager.DEFAULT_OPTIONS);
        } catch (IOException e) {
            Log.e(TAG, "Cannot create Manager object", e);
            return;
        }

        try {
            database = manager.getDatabase(DATABASE_NAME);
        } catch (CouchbaseLiteException e) {
            Log.e(TAG, "Cannot get Database", e);
            return;
        }
    }
                    ]]></code-block>
                </code-set>
               </body>
          </topic>
          
          <topic id="create-a-task">
               <title>Create a new task document</title>
               <body>
                    <paragraph>
                         To create a new task, the user inputs a name into the text field. The task document is tagged with the
                         <code>list_id</code> of the list it belongs to.
                    </paragraph>
                    <code-set>
                   <code-block language="objective-c"><![CDATA[
// Called when the text field's Return key is tapped.
- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    NSString *title = _addItemTextField.text;
    if (title.length == 0) {
        return NO;  // Nothing entered
    }
    [_addItemTextField setText:nil];
    
    // Create and save a new task:
    NSAssert(_detailItem, @"no current list");
    
    NSData *image = imageForNewTask ? [self dataForImage:imageForNewTask] : nil;
    Task *task = [_detailItem addTaskWithTitle:title withImage:image withImageContentType:ImageDataContentType];
    NSError *error;
    if ([task save:&error]) {
        imageForNewTask = nil;
        [self updateAddImageButtonWithImage:nil];
    } else {
        // [AppDelegate showAlert: @"Couldn't save new item" error: error fatal: NO];
    }
    
	return YES;
}
                      ]]></code-block>
                    <code-block language="java"><![CDATA[
            final EditText text = (EditText) header.findViewById(R.id.text);
            text.setOnKeyListener(new View.OnKeyListener() {
                @Override
                public boolean onKey(View view, int i, KeyEvent keyEvent) {
                    if ((keyEvent.getAction() == KeyEvent.ACTION_DOWN) &&
                            (keyEvent.getKeyCode() == KeyEvent.KEYCODE_ENTER)) {
                        String inputText = text.getText().toString();
                        if (inputText.length() > 0) {
                            try {
                                Task.createTask(getDatabase(), inputText, mImageToBeAttached, listId);
                            } catch (CouchbaseLiteException e) {
                                Log.e(Application.TAG, "Cannot create new task", e);
                            }
                        }

                        // Reset text and current selected photo if available.
                        text.setText("");
                        deleteCurrentPhoto();

                        return true;
                    }
                    return false;
                }
            });
                    ]]></code-block>
                </code-set>
               </body>
          </topic>

          <topic id="check-a-checkbox">
               <title>Check a task checkbox</title>
               <body>
                    <paragraph>
                         When the user touches a task, they'll expect the checkbox to toggle. The way we do this is by saving a new revision
                         of a document with the opposite boolean value for the <code>checked</code> field.
                    </paragraph>
                    <code-set>
                         <code-block language="objective-c"><![CDATA[
// Called when a row is selected/touched.
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    CBLQueryRow *row = [self.dataSource rowAtIndex:indexPath.row];
    Task *task = [Task modelForDocument:row.document];
    
    // Toggle the document's 'checked' property:
    task.checked = !task.checked;
    
    // Save changes:
    NSError *error;
    if (![task save:&error]) {
//        [gAppDelegate showAlert: @"Failed to update item" error: error fatal: NO];
    }
}                              
                              ]]></code-block>
                         <code-block language="java"><![CDATA[
    // Task.java
    public static void updateCheckedStatus(Document task, boolean checked)
            throws CouchbaseLiteException {
        Map<String, Object> properties = new HashMap<String, Object>();
        properties.putAll(task.getProperties());
        properties.put("checked", checked);
        task.putProperties(properties);
    }                              
                              ]]></code-block>
                    </code-set>
               </body>
          </topic>
          
          <topic id="login-and-sync">
               <title>Login and Sync</title>
               <body>
                    <paragraph>When the user logs in, the application can trigger sync using the credentials 
                         obtained during the login process. In the application, the logic gets a little 
                    hard to follow, as this code is also responsible for prompting a fresh login when sessions
                    expire, etc. So we'll just look at a couple of example snippets. If you cloned the source
                    code yourself as part of a <ref href="getting-started">Getting Started tutorial</ref> now 
                    might be a good time to browse it.</paragraph>

                                        <code-set>
                         <code-block language="objective-c"><![CDATA[
- (void)defineSync {
    pull = [_database createPullReplication:_remoteURL];
    pull.continuous = YES;
    
    push = [_database createPushReplication:_remoteURL];
    push.continuous = YES;
    
    [self listenForReplicationEvents: push];
    [self listenForReplicationEvents: pull];
    
    [_authenticator registerCredentialsWithReplications: @[pull, push]];
}                             
                              ]]></code-block>
                         <code-block language="java"><![CDATA[
    public void startReplicationSyncWithCustomCookie(String name, String value, String path, Date expirationDate, boolean secure, boolean httpOnly) {

        Replication[] replications = createReplications();
        Replication pullRep = replications[0];
        Replication pushRep = replications[1];

        pullRep.setCookie(name, value, path, expirationDate, secure, httpOnly);
        pushRep.setCookie(name, value, path, expirationDate, secure, httpOnly);

        pullRep.start();
        pushRep.start();

        Log.v(TAG, "Start Replication Sync ...");

    }                            
                              ]]></code-block>
                    </code-set>
                                        <paragraph>
                         The user may create lists and tasks without ever establishing a connection to the cloud host. If they 
                         decide they want to sync, they can authenicate (in the example app we use Facebook but you can easily
                         do custom auth). Because the data was created before we had an authenticated user to connect it with, 
                         documents are missing <code>user_id</code> tags, so a crucial step before we actually sync, is to tag 
                         all the existing local data with the <code>user_id</code>. 
                         (In our case we use the email address associated with the Facebook account)
                    </paragraph>
                                                            <code-set>
                         <code-block language="objective-c"><![CDATA[
+ (void) updateAllListsInDatabase: (CBLDatabase*)database withOwner: (Profile*)owner error: (NSError**)e {
    CBLQueryEnumerator *myLists = [[List queryListsInDatabase:database] run:e];
    if (*e) {
        return;
    }
    for (CBLQueryRow* row in myLists) {
        List* list = [List modelForDocument: row.document];
        list.owner = owner;
        [list save:e];
        if (*e) {
            return;
        }
    }
}                          
                              ]]></code-block>
                         <code-block language="java"><![CDATA[
    public static void assignOwnerToListsIfNeeded(Database database, Document user)
            throws CouchbaseLiteException {
        QueryEnumerator enumerator = getQuery(database).run();

        if (enumerator == null)
            return;

        while (enumerator.hasNext()) {
            Document document = enumerator.next().getDocument();

            String owner = (String) document.getProperty("owner");
            if (owner != null) continue;

            Map<String, Object> properties = new HashMap<String, Object>();
            properties.putAll(document.getProperties());
            properties.put("owner", user.getId());
            document.putProperties(properties);
        }
    }
                            
                              ]]></code-block>
                    </code-set>
                    
               </body>
          </topic>
          
          <topic id="sharing-my-lists">
               <title>Sharing my Lists</title>
               <body>
                    <paragraph>
                         Once a user is syncing with the cloud host, they sync a list of users profiles for people they can 
                         share a list with. This list is used to power the Share UI, by binding a view query to the list of names.
                         If someone signs up while you are in this view, you'll see their name pop up.
                    </paragraph>
                    <code-set>
                         <code-block language="objective-c"><![CDATA[

- (void)configureView
{
	// Do any additional setup after loading the view.
    _dataSource.query = [Profile queryProfilesInDatabase: database].asLiveQuery;
    _dataSource.labelProperty = @"name";    // Document property to display in the cell label}
}

// Customizes the appearance of table view cells.
- (void)couchTableSource:(CBLUITableSource*)source
             willUseCell:(UITableViewCell*)cell
                  forRow:(CBLQueryRow*)row
{
    
    // Configure the cell contents.
    // (cell.textLabel.text is already set, thanks to setting up labelProperty above.)
    NSString* personId = row.document.documentID;
//    if the person's id is in the list of members, or is the owner we are happy.
    bool member = NO;
    if ([myDocId isEqualToString:personId]) {
        member = YES;
    } else {
        NSMutableSet *intersection = [NSMutableSet setWithArray:_list.members];
        [intersection intersectSet:[NSSet setWithObject:personId]];
        
        if ([intersection count] > 0) {
            member = YES;
        }
    }

    if (member) {
        cell.accessoryType = UITableViewCellAccessoryCheckmark;
    } else {
        cell.accessoryType = UITableViewCellAccessoryNone;
    }
}
                              ]]></code-block>
                         <code-block language="java"><![CDATA[
            final Document user = (Document) getItem(position);
            final CheckBox checkBox = (CheckBox) convertView.findViewById(R.id.checked);
            boolean checked = isMemberOfTheCurrentList(user);
            checkBox.setChecked(checked);
            checkBox.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    try {
                        if (checkBox.isChecked()) {
                            List.addMemberToList(mCurrentList, user);
                        } else {
                            List.removeMemberFromList(mCurrentList, user);
                        }
                    } catch (CouchbaseLiteException e) {
                        Log.e(Application.TAG, "Cannot update a member to a list", e);
                    }
                }
            });
                              ]]></code-block>
                    </code-set>
               </body>
          </topic>
                    
          <topic id="whats-missing">
               <title>What's Missing?</title>
               <body>
                    <paragraph>
                         An example app isn't a real app, so what did we leave out, that you might add if you productized ToDo Lite? 
                    </paragraph>
                    <ordered-list>
                         <list-item>User Relationships (so people would have to opt-in before they sync lists from you)</list-item>
                         <list-item>Push Notifications (we have example integrationc code here)</list-item>
                         <list-item>Sort the list by hand.</list-item>
                         <list-item>Web site version of the app</list-item>
                    </ordered-list>
                    <paragraph>
                         We are working to close the gap with proof of concept feature implementations, etc. <external-ref href="https://github.com/couchbaselabs/ToDoLite-iOS/issues">Patches and bug reports welcome!</external-ref>
                    </paragraph>
               </body>
          </topic>
          
          
     </topics>
</article>


