<?xml version="1.0" encoding="UTF-8"?>
<guide xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="../../docs.xsd"
       id="query-sorting">
   <title>Query and Sorting</title>
   <description>A guide to query and search documents stored in Couchbase Lite.</description>
   <introduction>

      <paragraph>Couchbase Lite Query and Sorting features are using the same programming model you will find in Couchbase Server. Everything is based on indexes created using a map and reduce function executed on all the documents stored in the database. <strong>MapReduce</strong> is quite simple and once you have created indexes, you will be able to query them.</paragraph>

        <topic id="indexing">
            <title>Index and MapReduce</title>

            <body>

            <paragraph>This guide shows you how to build an Index using MapReduce.</paragraph>

            <section id="map">
                <title>The Map Function</title>
                <body>
                    <paragraph>So what is <strong>MapReduce</strong> you may ask? To put it simply, it is a couple of functions that will be executed to build our index. Let us begin with the Map function.</paragraph>
                    <paragraph>The MapReduce function takes two arguments: a document and an emitter. The emitter is an object used to add entries to an index. The document is a JSON document stored in the database. This Map function will be executed on all of the JSON documents available. It means you have an attempt to use the emitter for each document. The resulting index in Couchbase terminology is called a <strong><ref href="../../guides/couchbase-lite/native-api/view.xml">View</ref></strong>.</paragraph>
                    <paragraph>Here is a simple example where there are three JSON documents representing their respective products.</paragraph>
                    <code-block language="javascript"><![CDATA[
                {
                  "type":"Product",
                  "created_at":"19850506",
                  "productName":"MyProduct"
                }
                ]]></code-block>
                <code-block language="javascript"><![CDATA[
                {
                  "type":"Product",
                  "created_at":"20140805",
                  "productName":"AnotherProductName"
                }
                ]]></code-block>
                <code-block language="javascript"><![CDATA[
                {
                  "type":"Product",
                  "created_at":"19860816",
                  "productName":"YetAnotherProductName"
                }
                ]]></code-block>
                    <paragraph>In the following Map function, the first argument is our JSON document represented as a Map object. The second argument is the Emitter object that allows to add an entry to an index.</paragraph>
                    <code-set>
                        <code-block language="objective-c"><![CDATA[
                    - (void)map:(CBLDocument *)document :(void (^)(id key, id value))emit {
                        emit(document[@"created_at"], document[@"productName"]);
                    }
                    ]]>
                        </code-block>
                        <code-block language="swift"><![CDATA[
                    func map(document: CBLDocument, emit: CBLMapEmitBlock) {
                        if let type = document["type"] as? String {
                            emit(document["created_At"], document["productName"])
                        }
                    }
                    ]]>
                        </code-block>
                        <code-block language="java"><![CDATA[
                      @Override 
                      public void map(Map<String, Object> document, Emitter emitter) { 
                        if ("Product".equals(document.get("type"))) { 
                          emitter.emit(document.get("created_at"), document.get("productName")); 
                        }
                      }
                    ]]></code-block>
                    </code-set>
                    <paragraph>
                        The Map function you see here will add an index entry for every document stored in the database for which the <strong>type</strong> field is "Product". This index entry will have a key and a value. The key is the first argument of the emit function and the value is the second argument. So as you can see here, the key is the "created_at" field and the value is the "productName" field.
                    </paragraph>
                    <paragraph>Now there is an index that would look like this:</paragraph>
                    <table>
                        <body>
                            <row><entry>Key</entry><entry>Value</entry></row>
                            <row><entry>19850506</entry><entry>MyProductName</entry></row>
                            <row><entry>docId3</entry><entry></entry></row>
                            <row><entry>20140805</entry><entry>AnotherProductName</entry></row>
                            <row><entry>docId1</entry><entry></entry></row>
                            <row><entry>19860816</entry><entry>YetAnotherProductName</entry></row>
                            <row><entry>docId2</entry><entry></entry></row>
                            <row><entry>...</entry><entry></entry></row>
                        </body>
                    </table>
                    <paragraph>
                        This index is sorted by key using UNICODE collation. In addition to the value, every index entry always has the id of the document used to create it. And this index can of course be queried or Reduced. Which takes us to the Reduce function.
                    </paragraph>
                </body>
            </section>
            <section id="reduce">
                <title>The Reduce Function</title>
                <body>
                    <paragraph>
                        The Reduce function is totally optional and not as commonly used as the Map function.  The functionality is to process the resulting index of a map function that is applied to all the document database.
                    </paragraph>
                    <paragraph>It can be used for instance to compute the total of "Product" in the database. Because we have a map function that already created an index with an entry for each Product in the database, we can then associate the following reduce to it:</paragraph>
                    <code-set>
                        <code-block language="objective-c"><![CDATA[
                    - (int)reduce:(NSArray *)keys values:(NSArray *)values rereduce:(BOOL) rereduce {
                        return values.count;
                    }
                    ]]>
                        </code-block>
                        <code-block language="swift"><![CDATA[
                    func reduce(keys: [AnyObject], values: [AnyObject], rereduce: Bool) -> Int {
                      return values.count
                    }
                    ]]>
                        </code-block>
                        <code-block language="java"><![CDATA[
                      @Override 
                      public Object reduce(List<Object> keys, List<Object> values, boolean rereduce) {
                        return new Integer(values.size());
                      }
                    ]]>
                        </code-block>
                    </code-set>
                    <paragraph>
                        The first argument is the list of keys, the second is the list of values and the third one is a boolean that allows another reduce function to be ran after this one.To return the total number of products, all we have to do is to return the size of the first or second arguments.
                    </paragraph>
                    <paragraph>
                        The index created by a MapReduce is called a <strong>View</strong> in Couchbase terminology. So if you want to use it in your code, you need to ask for a View. If it does not exist, it will be created for you:
                    </paragraph>
                    <code-set>
                        <code-block language="objective-c"><![CDATA[
                    CBLView *productView = [db viewNamed:@"products"];
                    [productView setMapBlock:^(NSDictionary *doc, CBLMapEmitBlock emit) {
                        emit(doc[@"created_at"], doc[@"productName"]);
                    } reduceBlock:^id(NSArray *keys, NSArray *values, BOOL rereduce) {
                        return [NSNumber numberWithInteger:[values count]];
                    } version:@"2"];
                    ]]>
                        </code-block>
                        <code-block language="swift"><![CDATA[
                    // Create a view and register its map and reduce functions:
                    let productView = db.viewNamed("products")
                    productView.setMapBlock({ (document, emit) -> Void in
                        if let type = document["type"] as? String {
                            emit(document["created_At"], document["productName"])
                        }
                    }, reduceBlock: { (keys, values, rereduce) -> AnyObject! in
                        return values.count
                    }, version: "2")
                    ]]>
                        </code-block>
                        <code-block language="java"><![CDATA[
                    // Create a view and register its map and reduce functions:
                    View productView = database.getView("products");
                    productView.setMapReduce(new Mapper() {
                        @Override
                        public void map(Map<String, Object> document, Emitter emitter) {
                          if ("Product".equals(document.get("type"))) { 
                            emitter.emit(document.get("created_at"), document.get("productName")); 
                          }
                        }
                        }, new Reducer() {
                           @Override
                           public Object reduce(List<Object> keys, List<Object> values, boolean rereduce) {
                             return new Integer(values.size());
                           }
                       }, "2");
                    ]]></code-block>
                    </code-set>
                    <paragraph>
                        You will find more details on Couchbase Views in the <ref href="../../guides/couchbase-lite/native-api/view.xml">reference guide</ref>
                    </paragraph>
                </body>
            </section>

            </body>
       </topic>


       <topic id="query">
           <title>Query</title>
           <body>
               <paragraph>This guide shows you how to query indexes built with MapReduce.</paragraph>
               <paragraph>
                   Here you will learn how to run queries over the indexes you have built with MapReduce.
               </paragraph>


               <section id="query">
                   <title>How to Query</title>
                   <body>
                       <paragraph>A View is of course useless if you cannot query it. Here is how it works in its simplest form:</paragraph>
                       <code-set>
                           <code-block language="objective-c"><![CDATA[
                    CBLQuery *query = [[database viewNamed:@"products"] createQuery];
                    // we don't need the reduce here
                    [query setMapOnly:YES];
                    CBLQueryEnumerator *result = [query run:nil];
                    for (CBLQueryRow *row in result) {
                        NSString *productName = [row value];
                        NSLog(@"Product name %@", productName);
                    }
                    ]]>
                           </code-block>
                           <code-block language="swift"><![CDATA[
                    var query = database.viewNamed("products").createQuery()
                    // we don't need the reduce here
                    query.mapOnly = true
                    var result = query.run(nil)
                    for (index, row) in enumerate(result.allObjects) {
                        var productName = (row as CBLQueryRow).value as String
                        println("Product name \(productName)")
                    }
                    ]]>
                           </code-block>
                           <code-block language="java"><![CDATA[
                        Query query = database.getView("products").createQuery();
                        // we don't need the reduce here
                        query.setMapOnly(true);
                        QueryEnumerator result = query.run();
                        for (Iterator<QueryRow> it = result; it.hasNext(); ) {
                           QueryRow row = it.next();
                           String productName = (String) row.getValue();
                           Log.w("MYAPP", "Product named %s", productName);
                        }
                    ]]></code-block>
                       </code-set>
                       <paragraph>First get the appropriate View, create a Query from it and then run the query. This is the simplest form.</paragraph>
                       <paragraph>Then you can modify some parameters from the Query object. Here the result of the query will log the product from the oldest to the newest. What if you want the newest first? You can use the descending parameter:</paragraph>
                       <unordered-list>
                           <list-item><strong>descending</strong>: If set to true, the keys will be returned in reverse order. (This also reverses the meanings of the startKey and endKey properties, since the query will now start at the highest keys and end at lower ones!)
                           </list-item>
                       </unordered-list>
                       <paragraph>Now we have all the products from the most to the least recent. This could be a lot of products. You don't want to get 10000 of them in a single query. How would you display all of them on a mobile device? Maybe you want to count them? Then that's why we have a reduce function. Instead let's limit the number of rows returned by the query with the <strong>limit</strong> parameter:</paragraph>

                       <unordered-list>
                           <list-item><strong>limit</strong>: If nonzero, this is the maximum number of rows that will be returned.
                           </list-item>
                       </unordered-list>

                       <paragraph>The next logical step when you have the first 10 newer products is to get the ten next newer products. To do this you can use the <strong>skip</strong> parameter. This is how you implement pagination:</paragraph>

                       <unordered-list>
                           <list-item><strong>skip</strong>: If nonzero, this many rows will be skipped (starting from the startKey if any.)
                           </list-item>
                       </unordered-list>

                       <paragraph>The resulting code for the third page of a 10 row pagination would look like this:</paragraph>
                       <code-set>
                           <code-block language="objective-c"><![CDATA[
                    CBLQuery *query = [[database viewNamed:@"products"] createQuery];
                    // we don't need the reduce here
                    [query setMapOnly:YES];
                    [query setDescending:YES];
                    [query setLimit:10];
                    [query setSkip:20];
                    ]]>
                           </code-block>
                           <code-block language="swift"><![CDATA[
                    var query = database.viewNamed("products").createQuery()
                    // we don't need the reduce here
                    query.mapOnly = true
                    query.descending = true
                    query.limit = 10
                    query.skip = 20
                    ]]>
                           </code-block>
                           <code-block language="java"><![CDATA[
                        Query query = database.getView("products").createQuery();
                        // we don't need the reduce here
                        query.setMapOnly(true);
                        query.setDescending(true);
                        query.setLimit(10);
                        query.setSkip(20);
                    ]]></code-block>
                       </code-set>
                       <paragraph>
                           This pagination use case works nicely when you want to show all the products without any particular criteria. What if you want all the products created between this date and this other date? This is where the startKey and endKey parameters come into play.
                       </paragraph>
                       <unordered-list>
                           <list-item>
                               <strong>startKey</strong>: the key to start at. The default value, null, means to start from the beginning.
                           </list-item>
                           <list-item>
                               <strong>endKey</strong>: the last key to return. The default value, null, means to return results until the last row.
                           </list-item>
                       </unordered-list>
                       <paragraph>
                           To get the 10 most recent products of all the products created between February 8, 2011(1297123200 in epoch timestamp) and May 21, 2014(1400630400 in epoch timestamp):
                       </paragraph>
                       <code-set>
                           <code-block language="objective-c"><![CDATA[
                    CBLQuery *query = [[database viewNamed:@"products"] createQuery];
                    // we don't need the reduce here
                    [query setMapOnly:YES];
                    [query setDescending:YES];
                    [query setLimit:10];
                    [query setSkip:20];
                    [query setStartKey:[NSNumber numberWithInt:1400630400]];
                    [query setEndKey:[NSNumber numberWithInt:1297123200]];
                    ]]>
                           </code-block>
                           <code-block language="swift"><![CDATA[
                    var query = database.viewNamed("products").createQuery()
                    // we don't need the reduce here
                    query.mapOnly = true
                    query.descending = true
                    query.limit = 10
                    query.skip = 0
                    query.startKey = 1400630400
                    query.endKey = 1297123200
                    ]]>
                           </code-block>
                           <code-block language="java"><![CDATA[
                        Query query = database.getView("products").createQuery();
                        // we don't need the reduce here
                        query.setMapOnly(true);
                        query.setDescending(true);
                        query.setLimit(10);
                        query.setSkip(0);
                        query.setStartKey(1400630400);
                        query.setEndKey(1297123200);
                    ]]></code-block>
                   </code-set>


                   <section id="resultsQuery">
                   <title>Query Results</title>
                   <body>
                       <paragraph>Now with the Query indexes complete, we can print the results to the log.  To show the query results, first obtain the the Query object from the <strong>View</strong>.  With the properties of the Query object set above, call the <strong>run</strong> method to get the results.  Results are returned as an 'QueryEnumerator' object that serve as an enumerable collection of QueryRow objects </paragraph>
                       <code-set>
                           <code-block language="objective-c"><![CDATA[
                    CBLQuery *query = [[database viewNamed:@"products"] createQuery];
                    // we don't need the reduce here
                    [query setMapOnly:YES];
                    [query setDescending:YES];
                    [query setLimit:10];
                    [query setSkip:20];
                    [query setStartKey:[NSNumber numberWithInt:1400630400]];
                    [query setEndKey:[NSNumber numberWithInt:1297123200]];
                    CBLQueryEnumerator *result = [query run:nil];
                    for (CBLQueryRow *row in result) {
                        NSString *productName = row.value;
                        NSLog(@"Product name %@", productName);
                    }
                    ]]>
                           </code-block>
                           <code-block language="swift"><![CDATA[
                    var query = database.viewNamed("products").createQuery()
                    // we don't need the reduce here
                    query.mapOnly = true
                    query.descending = true
                    query.limit = 10
                    query.skip = 0
                    query.startKey = 1400630400
                    query.endKey = 1297123200
                    //Query for Results
                    var result = query.run(nil)
                    for (index, row) in enumerate(result.allObjects) {
                        var productName = (row as CBLQueryRow).value as String
                        println("Product named \(productName)")
                    }
                    ]]>
                           </code-block>
                           <code-block language="java"><![CDATA[
                        Query query = database.getView("products").createQuery();
                        // we don't need the reduce here
                        query.setMapOnly(true);
                        query.setDescending(true);
                        query.setLimit(10);
                        query.setSkip(0);
                        query.setStartKey(1400630400);
                        query.setEndKey(1297123200);
                        //Query for Results
                        QueryEnumerator result = query.run();
                        for (Iterator<QueryRow> it = result; it.hasNext(); ) {
                           QueryRow row = it.next();
                           String productName = (String) row.getValue();
                           Log.w("MYAPP", "Product named %s", productName);
                        }
                    ]]></code-block>


                       </code-set>


                   </body>
               </section>





                       <paragraph>While it's good to have pagination, it's better to know where it stops. Like how many pages do you have? For that we can use the reduce function. All you have to do is set MapOnly to false. The result is still a QueryEnumerator but with only one row. It's value is what is returned by the reduce function.</paragraph>
                       <code-set>
                           <code-block language="objective-c"><![CDATA[
                    CBLQuery *query = [[database viewNamed:@"products"] createQuery];
                    [query setMapOnly:false];
                    CBLQueryEnumerator *result = [query run:nil];
                    NSInteger total = [[result rowAtIndex:0] value];
                    ]]>
                           </code-block>
                           <code-block language="swift"><![CDATA[
                    var query = database.viewNamed("products").createQuery()
                    query.mapOnly = false
                    var result = query.run(nil)
                    var total = result.rowAtIndex(0).value as Int
                    ]]>
                           </code-block>
                           <code-block language="java"><![CDATA[
                        Query query = database.getView("products").createQuery();
                        query.setMapOnly(false);
                        QueryEnumerator result = query.run();
                        Integer total = (Integer) result.getRow(0).getValue();
                    ]]></code-block>
                       </code-set>
                       <paragraph>
                           If you are in a search with a criteria use case, you don't want the total obviously. You only want the total of rows returned by the said search. This will work automatically if you specify the start and end keys like this:
                       </paragraph>
                       <code-set>
                           <code-block language="objective-c"><![CDATA[
                    CBLQuery *query = [[database viewNamed:@"products"] createQuery];
                    [query setMapOnly:false];
                    [query setStartKey:[NSNumber numberWithInteger:1400630400]];
                    [query setEndKey:[NSNumber numberWithInteger:1297123200]];
                    CBLQueryEnumerator *result = [query run:nil];
                    NSNumber *total = [[result rowAtIndex:0] value];
                    ]]>
                           </code-block>
                           <code-block language="swift"><![CDATA[
                    var query = database.viewNamed("products").createQuery()
                    query.mapOnly = false
                    query.startKey = 1400630400
                    query.endKey = 1297123200
                    var result = query.run(nil)
                    var total = result.rowAtIndex(0).value as Int
                    ]]>
                           </code-block>
                           <code-block language="java"><![CDATA[
                    Query query = database.getView("products").createQuery();
                    query.setMapOnly(true);
                    query.setStartKey(1400630400);
                    query.setEndKey(1297123200);
                    QueryEnumerator result = query.run();
                    Integer total = (Integer) result.getRow(0).getValue();
                    ]]></code-block>
                       </code-set>
                       <paragraph>You will find more details on Couchbase Queries in the <ref href="../../guides/couchbase-lite/native-api/query.xml">reference guide</ref>.</paragraph>
                   </body>
               </section>


               <section id="keysQuery">
                   <title>Query by Key</title>
                   <body>
                       <paragraph>All of the previous query examples assumed that you did not know the ids of the documents you were looking for. If you are not in a search use case like this and you already have the document id you want to retrieve, you can query directly by key. To do so you can use the <strong>setKeys</strong> method that takes a key array as parameter.</paragraph>
                       <code-set>
                           <code-block language="objective-c"><![CDATA[
                    CBLQuery *query = [database createAllDocumentsQuery];
                    NSArray *keys = @[@"docId1", @"docId2"];
                    [query setKeys:keys];
                    CBLQueryEnumerator *result = [query run:nil];
                    ]]>
                           </code-block>
                           <code-block language="swift"><![CDATA[
                    var query = database.createAllDocumentsQuery()
                    var keys = ["docId1", "docId2"]
                    query.keys = keys
                    var result = query.run(nil)
                    ]]>
                           </code-block>
                           <code-block language="java"><![CDATA[
                    Query query = database.createAllDocumentsQuery();
                    String[] keys = {"docId1","docId2"};
                    query.setKeys(keys);
                    QueryEnumerator result = query.run();
                    ]]></code-block>
                       </code-set>
                   </body>
               </section>
               <section id="allDoc">
                   <title>The allDocs query</title>
                   <body>
                       <paragraph>The allDocs query can be seen as a builtin query. It does not require a view, you can just run it right away. To make things simpler let's pretend it is based on an 'all' view that simply emits null as a value and the id as key for every documents in the database. It can obviously be used for queries by key.</paragraph>
                       <code-set>
                           <code-block language="objective-c"><![CDATA[
                    - (void)map:(CBLDocument *)document :(void (^)(id key, id value))emit {
                        emit([document documentID], nil);
                    }
                    ]]>
                           </code-block>
                           <code-block language="swift"><![CDATA[
                    func map(document: CBLDocument, emit: CBLMapEmitBlock) {
                        emit(document.documentID, null)
                    }
                    ]]>
                           </code-block>
                           <code-block language="java"><![CDATA[
                    @Override 
                    public void map(Map<String, Object> document, Emitter emitter) { 
                        emitter.emit(document.getId(), null); 
                    }
                    ]]></code-block>
                       </code-set>
                       <paragraph>This query can use all the available options like range, sorting, keys that you have seen so far.
                           The default mode does not return 'everything'. It returns the non-deleted documents. You also have modes to retrieve deleted documents or existing conflicts. You will find more details on Couchbase Queries in the <ref href="../../guides/couchbase-lite/native-api/query.xml">reference guide</ref>.</paragraph>
                   </body>
               </section>


           </body>
       </topic>


       <topic id="liveQuery">
           <title>Live Query</title>
           <body>

               <paragraph>This guide shows you how to update query results in real-time through Live Query.</paragraph>
               <paragraph><emphasis>This is money!</emphasis></paragraph>
               <paragraph>Said every mobile developer we talked to during our <external-ref href="https://github.com/couchbaselabs/Developer-Day">mobile workshops</external-ref>.</paragraph>

               <section id="livequery">
                   <title>Introduction to Live Query</title>
                   <body>
                       <paragraph>
                           While there is not much to know about it in itself, it's benefits are so good it deserves its own guide. The goal of the live query is to easily enable real time changes to your app.
                       </paragraph>
                       <paragraph>Let's say for a minute that you are writing a Chat app. What you want is to have the new message coming up without needing any user interaction like refreshing the screen. This is exactly what LiveQuery can do automatically for you.</paragraph>
                       <paragraph>How does it work? A live query stays active and monitors the database and view index for changes. When there's a change it re-runs itself automatically, and if the query results changed it notifies any observers.</paragraph>
                       <paragraph>Because of this programming model, a LiveQuery is tightly coupled to the platform it's implemented on. Here is a simple Android example.</paragraph>
                       <paragraph>On Android you can imagine a ListActivity object. It defines how to display a list of things on the screen. To do so it requires a ListAdapter. Here it's the new MessageAdapter instance.</paragraph>
                       <code-set>
                           <code-block language="java"><![CDATA[
                        Query query = database.getView("products").createQuery();
                        query.setMapOnly(true);
                        LiveQuery lq = query.toLiveQuery();
                        setListAdapter(new MessageAdapter(lq, this));
                    ]]></code-block>
                       </code-set>
                       <paragraph>This adapter is among other things responsible for rendering every element in the list. This is done in the <strong>getView</strong> method that follows. Take a particular attention to the <strong>getItem</strong> call. This is where the database document comes from. This method is implemented in the LiveQueryAdapter class. </paragraph>

                       <code-set>
                           <code-block language="java"><![CDATA[
public class MessageAdapter extends LiveQueryAdapter {

    public MessageAdapter(LiveQuery query, Context context) {
        super(query, context);
    }

    @Override
    // Display a Message as an Item in the list View
    public View getView(int position, View convertView, ViewGroup parent) {
        // Load the View if not done so already from the view_presentation.xml
        if (convertView == null) {
            LayoutInflater inflater = (LayoutInflater) parent.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = inflater.inflate(R.layout.view_presentation, null);
        }

        // Get the document currently to be displayed
        final Document document = (Document) getItem(position);

        // make sure this is valid
        if (document == null || document.getCurrentRevision() == null) {
            return convertView;
        }

        // Turn the document into a message model we can operate on
        final Message message = Message.from(document);


        // Fill in all the view items
        TextView titleView = (TextView) convertView.findViewById(R.id.title);
        titleView.setText("Message:" + message.getMessage());

        return convertView;

    }


}

                    ]]></code-block>
                       </code-set>
                       <paragraph>The LiveQueryAdapter class is abstract because it's purpose is to be extended by the final adapter implementing how you render a list element from a document. It extends the BaseAdapter class in the Android SDK. The most interesting part here is the <strong>query.addChangeListener</strong> call. It adds a listener on the live query. Each time a change occurs, the inner <strong>run</strong> method is executed. This method simply notifies that the data returned has changed. When this occurs the view is rendered again with the latest changes. And that's it. Quite simple really.</paragraph>

                       <code-set>
                           <code-block language="java"><![CDATA[
public abstract class LiveQueryAdapter extends BaseAdapter {

    private LiveQuery query;
    private QueryEnumerator enumerator;
    private Context context;

    public LiveQueryAdapter(LiveQuery query, Context context) {
        this.query = query;
        this.context = context;
        // Everytime the query returns a new result we notify the ListView of this fact and update the UI
        query.addChangeListener(new LiveQuery.ChangeListener() {
            @Override
            public void changed(final LiveQuery.ChangeEvent changeEvent) {
                ((Activity) LiveQueryAdapter.this.context).runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        enumerator = changeEvent.getRows();
                        notifyDataSetChanged();
                    }
                });
            }
        });
        query.start();
    }

    @Override
    public int getCount() {
        return (enumerator == null) ? 0 : enumerator.getCount();
    }

    @Override
    public Object getItem(int i) {
        return enumerator != null ? enumerator.getRow(i).getDocument() : null;
    }

    @Override
    public long getItemId(int i) {
        return enumerator.getRow(i).getSequenceNumber();
    }

    @Override
    public abstract View getView(int position, View convertView, ViewGroup parent);

    public void invalidate() {
        if (query != null) {
            query.stop();
        }
    }
}
                    ]]></code-block>
                       </code-set>
                       <paragraph>This is all the code you need to have a list of elements updated in real time when a change occurs in the database. This is an important change in the programming model because you don't handle the queries yourself. You don't have to send them to a distant server and manage the network problems that might occur. Instead you just rely on events sent by the local database.</paragraph>
                   </body>
               </section>

           </body>

       </topic>








   </introduction>
</guide>
