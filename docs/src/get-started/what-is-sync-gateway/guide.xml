<?xml version="1.0" encoding="UTF-8"?>
<guide xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="../../docs.xsd"
       id="what-is-sync-gateway">
    <title>What is Sync Gateway?</title>
    <description>
        <paragraph>Sync Gateway enables each Couchbase Lite database to replicate changes to your app's data in both directions. Couchbase Lite pushes up changes in your app's on-device data, and Sync Gateway stores that data a "bucket" backed by our highly scalable Couchbase Server technology.</paragraph>
    </description>
    <introduction>
        <paragraph>Sync Gateway enables each Couchbase Lite database to replicate changes to your app's data in both directions. Couchbase Lite pushes up changes in your app's on-device data, and Sync Gateway stores that data a "bucket" backed by our highly scalable Couchbase Server technology.</paragraph>
        <paragraph>Sync Gateway runs at the boundary between your private cloud and the public cloud.  It handles the same application concerns that you would have in any web-based application such as user authentication, authorization, and logging. Sync Gateway also provides you with a way to determine what records are relevant for each user, which we call "data orchestration."</paragraph>
        <topic id="couchbase-sync">
            <title>Synchronization</title>
            <body>
                <section id="sync">
                    <body>
                        <paragraph>All Couchbase Lite platforms can set up push and/or pull replication sessions to Sync Gateway. It takes very little code to accomplish this. Here is all the code that you would typically need to enable full bi-directional, authenticated, realtime sync between Couchbase Lite and Sync Gateway :</paragraph>
                        <code-set>
                            <code-block language="swift"><![CDATA[
                                let url = NSURL(string: "http://localhost:4984/my-app/")
                                let push = database.createPushReplication(url)
                                let pull = database.createPullReplication(url)
                                push.continuous = true
                                pull.continuous = true
                                var auth: CBLAuthenticatorProtocol?
                                auth = CBLAuthenticator.basicAuthenticatorWithName(username, password: password)
                                push.authenticator = auth
                                pull.authenticator = auth
                                push.start();
                                pull.start();
                            ]]></code-block>
                            <code-block language="objective-c"><![CDATA[
                                NSURL *url = [[NSURL alloc] initWithString:@"http://localhost:4984/my-app/"];
                                CBLReplication *push = [database createPushReplication:url];
                                CBLReplication *pull = [database createPullReplication:url];
                                push.continuous = pull.continuous = YES;
                                id<CBLAuthenticator> *auth = [CBLAuthenticator basicAuthenticatorWithName:@"president" password:@"password!"];
                                [push setAuthenticator:auth];
                                [pull setAuthenticator:auth];
                                [push start];
                                [pull start];
                            ]]></code-block>
                            <code-block language="java"><![CDATA[
                                URL url = new URL("http://localhost:4984/my-app/");
                                Replication push = database.createPushReplication(url);
                                Replication pull = database.createPullReplication(url);
                                pull.setContinuous(true);
                                push.setContinuous(true);
                                Authenticator auth = AuthenticatorFactory.createBasicAuthenticator("president", "password!");
                                push.setAuthenticator(auth);
                                pull.setAuthenticator(auth);
                                push.start();
                                pull.start();
                            ]]></code-block>
                            <code-block language="C#"><![CDATA[
                                Uri url = new Hri("http://localhost:4984/my-app/");
                                Replication push = database.CreatePushReplication(url);
                                Replication pull = database.CreatePullReplication(url);
                                pull.Continuous = true;
                                push.Continuous = true;
                                Authenticator auth = AuthenticatorFactory.CreateBasicAuthenticator("president", "password!");
                                push.Authenticator = auth;
                                pull.Authenticator = auth;
                                push.Start();
                                pull.Start();
                            ]]></code-block>
                        </code-set>
                        <paragraph>There are a number of additional replication options that you can use in your application to handle complex scenarios, but this example covers the vast majority of use cases.</paragraph>
                        <paragraph>You can scale out Sync Gateway just like you would any web application: by adding more nodes behind a load balancer, such as nginx.</paragraph>
                    </body>
                </section>
                <section id="access-filtering">
                    <title>Access Control and Filtering</title>
                    <body>
                        <paragraph>For our CFP app, we’ve in effect defined a couple of different roles for our different users. Sync Gateway provides an api for defining roles for your authenticated users as well. Those different roles have different data access needs when working with the CFP submissions. Those who are submitting need access to their own submissions and those who are reviewing need access to all ‘submitted’ CFPs.</paragraph>
                        <paragraph>As discussed earlier, Sync Gateway provides a place for user authentication for apps built on Couchbase Lite. It even provides federated user authentication with the most common services such as oauth, openId, mozilla persona. The authentication scheme is extendable as needed so you can connect it to your existing authentication services.</paragraph>
                        <paragraph>Once you know who the user is, then you have to decide what they have access to. Sometimes, that access is not just a matter of security, it’s a matter of efficiency. With many large scale deployments the amount of data is so large that we won’t want to put all of the data on all devices. This is <strong>Data Routing</strong> and in Couchbase Mobile, it’s done with <strong>channels</strong>. </paragraph>
                    </body>
                </section>
                <section id="channels">
                    <title>Channels</title>
                    <body>
                        <paragraph>Conceptually, A document belongs to one or more channels. A user has access to 0 or more channels and they receive access to the items in the channel. In this way, it's similar to a tagged message queue.</paragraph>
                        <paragraph>Channels typically have names that are meaningful to you, the application developer. For instance for our CFP application, we can imagine a defined channel being “submitted” proposals and a channel per user submitting. This will allow our application users to access their own data as much as needed and the reviewers to access all submitted data. </paragraph>
                        <paragraph>To learn more about developing Access Control and Data Routing with channels see the <ref href="../../guides/sync-gateway/3-channel-development.xml">channels section of the Sync Gateway guide</ref>.</paragraph>
                    </body>
                </section>
                <section id="validation">
                    <title>Validation</title>
                    <body>
                        <paragraph>Validation exists at multiple levels in a Couchbase Mobile stack. It will usually be both in the app built on Couchbase Lite and Sync Gateway.</paragraph>
                        <paragraph>You can provide a better user experience when your application validates data on the client side. If for instance, we want to ensure that the CFP submission contains a title, the app you develop would of course not allow the record to be saved to Couchbase Lite until a title is entered.</paragraph>
                        <paragraph>However, for security reasons and to have a single point of control where you will enforce business logic, you may want to make sure the data sent to sync gateway is actually valid from a 'server side' point of view. For this, the Sync Gateway provides a functional programming interface where you will typically do a subset of checks.</paragraph>
                        <paragraph>Let's expand our simple example. You want all your documents to have a 'type' and an 'owner' field. The type field is used to adapt business rules to your documents and the owner is used for security purposes (only the logged in user a.k.a the owner can delete the document).</paragraph>
                        <paragraph>If a document has no type then we don't know what to do with it. So we can throw an error saying the document is invalid.</paragraph>
                        <paragraph>If the document has no owner field and someone tries to delete it, we cannot do a security check, so we throw another error saying the document structure is invalid.</paragraph>
                        <code-block language="java"><![CDATA[
                          if (!doc.owner) {
                              throw (forbidden:"For security reason a document must have an owner.")
                          }

                          if (!doc.type) {
                              throw (forbidden:"A document must have a type.")
                          }
                        ]]></code-block>
                    </body>
                </section>
            </body>
        </topic>
        <topic id="summary">
            <title>Summary and Learning More</title>
            <body>
                <paragraph>
                    In a Couchbase Mobile deployment, you can see how Sync Gateway provides a place for replication to occur for apps built on Couchbase Lite. It also provides a way for app developers to define and authenticate users and control access or route a subset of data to users.
                </paragraph>
                <paragraph>
                    To learn more, see the <ref href="../../guides/sync-gateway/set.xml">Sync Gateway Guide</ref> in our documentation. There are also sample applications which show these Sync Gateway concepts in both the <external-ref href="https://github.com/couchbaselabs/Grocery-Sync-iOS">GrocerySync iOS</external-ref> and <external-ref href="https://github.com/couchbaselabs/GrocerySync-Android">GrocerySync Android</external-ref> sample applications.
                </paragraph>
            </body>
        </topic>
    </introduction>
</guide>
