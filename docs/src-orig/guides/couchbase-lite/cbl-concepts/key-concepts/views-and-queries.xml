<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../../../docs.xsd"
         id="views-and-queries">
   <title>Views And Queries</title>
   <description>TODO: Add description.</description>
   <introduction>
      <paragraph>You use MapReduce functions to create indexes, called views, of the documents in a database. Then query the view to retrieve data from the database.</paragraph>
      <paragraph>Querying is probably the hardest thing about Couchbase Lite for SQL users to get used to. In SQL, you use a complex query language to specify exactly what data you want, then run the query and get back the data. In Couchbase Lite it's a two-stage process based on a technique called <external-ref href="http://en.wikipedia.org/wiki/MapReduce">MapReduce</external-ref>.</paragraph>
      <paragraph>First you define a <strong>view</strong> that uses a <emphasis>map function</emphasis> to extract information out of every document. The map function is written in the same language as your app—most likely Objective-C or Java—so it's very flexible. The result of applying the map function to the database is an ordered set of key-value pairs. For example, a map function might grind through an address-book database and produce a set of mappings from names to phone numbers. The view's output is stored persistently in the database and updated incrementally as documents change. It's very much like the type of index a SQL database creates internally to optimize queries.</paragraph>
      <paragraph>The second step is querying the view to get actual data. You give a range of keys, and get back all the key-value pairs in that range, sorted by key. Optionally, you can use the view's reduce function to aggregate values together, or group matching values into one. It's very simple compared to the baroque possibilities of SQL <code>SELECT</code> statements—the power of views comes both from the flexibility of the map and reduce functions, and from the ability to use compound (array) keys to sort the results in interesting ways.</paragraph>
      <paragraph>Remember: a view is not a <emphasis>query</emphasis>, it's an <emphasis>index</emphasis>. Views are persistent, and need to be updated (incrementally) whenever documents change, so having large numbers of them can be expensive. Instead, it's better to have a smaller number of views that can be queried in interesting ways.</paragraph>
   </introduction>
</article>
