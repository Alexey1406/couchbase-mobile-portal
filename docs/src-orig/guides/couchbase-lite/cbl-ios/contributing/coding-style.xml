<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../../../docs.xsd"
         id="coding-style">
   <title>Coding Style</title>
   <description>TODO: Add description.</description>
   <introduction>
      <paragraph>Please use the coding style guidelines and naming conventions described in this section.</paragraph>
   </introduction>
   <topics>
      <topic id="source-files">
         <title>Source Files</title>
         <body>
            <unordered-list>
               <list-item>
                  <paragraph>Put an Apache license at the top of all .m files and other files containing actual code. Update the year if necessary.  </paragraph>
               </list-item>
               <list-item>
                  <paragraph>For indents, use 4 spaces (do not use tabs).</paragraph>
               </list-item>
               <list-item>
                  <paragraph>Use the following pattern for naming category files: <code>CBLClassName+CategoryName.m</code>.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>In headers, use <code>@class</code> or <code>@protocol</code> forward declarations, when possible, instead of importing the class headers.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>Try to limit lines to 100 characters wide.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>Try to keep source files short. Under 500 lines is best and don't go over 1000 if you can help it. If a class gets bigger, consider breaking it up into topical categories, as was done with <code>CBLDatabase</code>.</paragraph>
               </list-item>
            </unordered-list>
         </body>
      </topic>
      <topic id="general-style">
         <title>General Style</title>
         <body>
            <paragraph>In general, go with Apple's style. However, we have idiosyncrasies and would prefer that you:</paragraph>
            <unordered-list>
               <list-item>
                  <paragraph>Put spaces after the colons in messages. For example:  </paragraph>

                  <code-block>
[foo bar: 1 baz: 0]
</code-block>
               </list-item>
               <list-item>
                  <paragraph>Put spaces after the colons in the method declarations also. For example:</paragraph>

                  <code-block>
- (void) bar: (int)bar baz: (BOOL)baz;
</code-block>
               </list-item>
               <list-item>
                  <paragraph>Put the opening curly-brace of a method or function at the end of the declaration line (not on a separate line). <emphasis>unless</emphasis> the declaration is multi-line.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>Don't put braces around single-line <code>if</code> blocks. You can use braces if you want, but please don't go on a clean-up mission and "fix" all the existing ones.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>Use modern Objective-C syntax, including the new shorthand for object literals and collection indexing.</paragraph>
               </list-item>
            </unordered-list>
            <paragraph>The following guidelines are mandatory:</paragraph>
            <unordered-list>
               <list-item>
                  <paragraph>Declare instance variables in the <code>@interface</code>. If you don't, the Mac build will fail because it still supports the old 32-bit Mac Obj-C runtime.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>Do <emphasis>not</emphasis> declare private methods in the <code>@interface</code>.</paragraph>
               </list-item>
               <list-item>
                  <paragraph>Declare internal methods (those not part of a class's API but needed by another source file, such as a category) in a category in <code>CBLInternal.h</code>, <emphasis>not</emphasis> in the public <code>@interface</code>.</paragraph>
               </list-item>
            </unordered-list>
         </body>
      </topic>
      <topic id="name-prefixes">
         <title>Name Prefixes</title>
         <body>
            <paragraph>Use the following object naming conventions:</paragraph>
            <unordered-list>
               <list-item>
                  <paragraph>Classes: <code>CBL</code> (<code>CBL_</code> is used for some private classes to prevent name conflicts with public classes.)</paragraph>
               </list-item>
               <list-item>
                  <paragraph>Instance variables: <code>_</code>
                  </paragraph>
               </list-item>
               <list-item>
                  <paragraph>Category methods on external classes: <code>cbl_</code>
                  </paragraph>
               </list-item>
               <list-item>
                  <paragraph>Constants: <code>kCBL</code> (do not use <code>ALL_CAPS</code>)</paragraph>
               </list-item>
               <list-item>
                  <paragraph>Static variables: <code>s</code> (even if defined inside a function/method!)</paragraph>
               </list-item>
               <list-item>
                  <paragraph>Static functions: No prefix, just lowercase.</paragraph>
               </list-item>
            </unordered-list>
         </body>
      </topic>
   </topics>
</article>
